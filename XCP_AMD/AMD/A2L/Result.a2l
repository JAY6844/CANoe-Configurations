/* generated by ASAP2 Updater Version 5.2.20  */
ASAP2_VERSION 1 60
/begin PROJECT example_Si2 ""

  /begin MODULE CPP ""

    /begin A2ML
      block "IF_DATA" taggedunion {
        "CANAPE_EXT" struct {
          int;
          taggedstruct {
            "LINK_MAP" struct {
              char[256];
              long;
              uint;
              uint;
              long;
              uint;
              uint;
              uint;
            };
            "DISPLAY" struct {
              long;
              double;
              double;
            };
            "VIRTUAL_CONVERSION" struct {
              char[256];
            };
          };
        };
        "CANAPE_MODULE" struct {
          taggedstruct {
            ("RECORD_LAYOUT_STEPSIZE" struct {
              char[256];
              uint;
              uint;
              uint;
              uint;
              uint;
              uint;
            })*;
          };
        };
        "XCP" struct {
          taggedstruct {
            block "PROTOCOL_LAYER" struct {
              uint;
              uint;
              uint;
              uint;
              uint;
              uint;
              uint;
              uint;
              uchar;
              uint;
              enum {
                "BYTE_ORDER_MSB_LAST" = 0,
                "BYTE_ORDER_MSB_FIRST" = 1
              };
              enum {
                "ADDRESS_GRANULARITY_BYTE" = 1,
                "ADDRESS_GRANULARITY_WORD" = 2,
                "ADDRESS_GRANULARITY_DWORD" = 4
              };
              taggedstruct {
                ("OPTIONAL_CMD" enum {
                  "GET_COMM_MODE_INFO" = 251,
                  "GET_ID" = 250,
                  "SET_REQUEST" = 249,
                  "GET_SEED" = 248,
                  "UNLOCK" = 247,
                  "SET_MTA" = 246,
                  "UPLOAD" = 245,
                  "SHORT_UPLOAD" = 244,
                  "BUILD_CHECKSUM" = 243,
                  "TRANSPORT_LAYER_CMD" = 242,
                  "USER_CMD" = 241,
                  "DOWNLOAD" = 240,
                  "DOWNLOAD_NEXT" = 239,
                  "DOWNLOAD_MAX" = 238,
                  "SHORT_DOWNLOAD" = 237,
                  "MODIFY_BITS" = 236,
                  "SET_CAL_PAGE" = 235,
                  "GET_CAL_PAGE" = 234,
                  "GET_PAG_PROCESSOR_INFO" = 233,
                  "GET_SEGMENT_INFO" = 232,
                  "GET_PAGE_INFO" = 231,
                  "SET_SEGMENT_MODE" = 230,
                  "GET_SEGMENT_MODE" = 229,
                  "COPY_CAL_PAGE" = 228,
                  "CLEAR_DAQ_LIST" = 227,
                  "SET_DAQ_PTR" = 226,
                  "WRITE_DAQ" = 225,
                  "SET_DAQ_LIST_MODE" = 224,
                  "GET_DAQ_LIST_MODE" = 223,
                  "START_STOP_DAQ_LIST" = 222,
                  "START_STOP_SYNCH" = 221,
                  "GET_DAQ_CLOCK" = 220,
                  "READ_DAQ" = 219,
                  "GET_DAQ_PROCESSOR_INFO" = 218,
                  "GET_DAQ_RESOLUTION_INFO" = 217,
                  "GET_DAQ_LIST_INFO" = 216,
                  "GET_DAQ_EVENT_INFO" = 215,
                  "FREE_DAQ" = 214,
                  "ALLOC_DAQ" = 213,
                  "ALLOC_ODT" = 212,
                  "ALLOC_ODT_ENTRY" = 211,
                  "PROGRAM_START" = 210,
                  "PROGRAM_CLEAR" = 209,
                  "PROGRAM" = 208,
                  "PROGRAM_RESET" = 207,
                  "GET_PGM_PROCESSOR_INFO" = 206,
                  "GET_SECTOR_INFO" = 205,
                  "PROGRAM_PREPARE" = 204,
                  "PROGRAM_FORMAT" = 203,
                  "PROGRAM_NEXT" = 202,
                  "PROGRAM_MAX" = 201,
                  "PROGRAM_VERIFY" = 200
                })*;
                "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                  "BLOCK" taggedstruct {
                    "SLAVE" ;
                    "MASTER" struct {
                      uchar;
                      uchar;
                    };
                  };
                  "INTERLEAVED" uchar;
                };
                "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
              };
            };
            block "SEGMENT" struct {
              uchar;
              uchar;
              uchar;
              uchar;
              uchar;
              taggedstruct {
                block "CHECKSUM" struct {
                  enum {
                    "XCP_ADD_11" = 1,
                    "XCP_ADD_12" = 2,
                    "XCP_ADD_14" = 3,
                    "XCP_ADD_22" = 4,
                    "XCP_ADD_24" = 5,
                    "XCP_ADD_44" = 6,
                    "XCP_CRC_16" = 7,
                    "XCP_CRC_16_CITT" = 8,
                    "XCP_CRC_32" = 9,
                    "XCP_USER_DEFINED" = 255
                  };
                  taggedstruct {
                    "MAX_BLOCK_SIZE" ulong;
                    "EXTERNAL_FUNCTION" char[256];
                  };
                };
                (block "PAGE" struct {
                  uchar;
                  enum {
                    "ECU_ACCESS_NOT_ALLOWED" = 0,
                    "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                    "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                    "ECU_ACCESS_DONT_CARE" = 3
                  };
                  enum {
                    "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                    "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                    "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                    "XCP_READ_ACCESS_DONT_CARE" = 3
                  };
                  enum {
                    "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                    "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                    "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                    "XCP_WRITE_ACCESS_DONT_CARE" = 3
                  };
                  taggedstruct {
                    "INIT_SEGMENT" uchar;
                  };
                })*;
                (block "ADDRESS_MAPPING" struct {
                  ulong;
                  ulong;
                  ulong;
                })*;
                "PGM_VERIFY" ulong;
              };
            };
            block "DAQ" struct {
              enum {
                "STATIC" = 0,
                "DYNAMIC" = 1
              };
              uint;
              uint;
              uchar;
              enum {
                "OPTIMISATION_TYPE_DEFAULT" = 0,
                "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
              };
              enum {
                "ADDRESS_EXTENSION_FREE" = 0,
                "ADDRESS_EXTENSION_ODT" = 1,
                "ADDRESS_EXTENSION_DAQ" = 3
              };
              enum {
                "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
              };
              enum {
                "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
              };
              uchar;
              enum {
                "NO_OVERLOAD_INDICATION" = 0,
                "OVERLOAD_INDICATION_PID" = 1,
                "OVERLOAD_INDICATION_EVENT" = 2
              };
              taggedstruct {
                "PRESCALER_SUPPORTED" ;
                "RESUME_SUPPORTED" ;
                block "STIM" struct {
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                  };
                  uchar;
                  taggedstruct {
                    "BIT_STIM_SUPPORTED" ;
                  };
                };
                block "TIMESTAMP_SUPPORTED" struct {
                  uint;
                  enum {
                    "NO_TIME_STAMP" = 0,
                    "SIZE_BYTE" = 1,
                    "SIZE_WORD" = 2,
                    "SIZE_DWORD" = 4
                  };
                  enum {
                    "UNIT_1NS" = 0,
                    "UNIT_10NS" = 1,
                    "UNIT_100NS" = 2,
                    "UNIT_1US" = 3,
                    "UNIT_10US" = 4,
                    "UNIT_100US" = 5,
                    "UNIT_1MS" = 6,
                    "UNIT_10MS" = 7,
                    "UNIT_100MS" = 8,
                    "UNIT_1S" = 9
                  };
                  taggedstruct {
                    "TIMESTAMP_FIXED" ;
                  };
                };
                "PID_OFF_SUPPORTED" ;
                (block "DAQ_LIST" struct {
                  uint;
                  taggedstruct {
                    "DAQ_LIST_TYPE" enum {
                      "DAQ" = 1,
                      "STIM" = 2,
                      "DAQ_STIM" = 3
                    };
                    "MAX_ODT" uchar;
                    "MAX_ODT_ENTRIES" uchar;
                    "FIRST_PID" uchar;
                    "EVENT_FIXED" uint;
                    block "PREDEFINED" taggedstruct {
                      (block "ODT" struct {
                        uchar;
                        taggedstruct {
                          ("ODT_ENTRY" struct {
                            uchar;
                            ulong;
                            uchar;
                            uchar;
                            uchar;
                          })*;
                        };
                      })*;
                    };
                  };
                })*;
                (block "EVENT" struct {
                  char[101];
                  char[9];
                  uint;
                  enum {
                    "DAQ" = 1,
                    "STIM" = 2,
                    "DAQ_STIM" = 3
                  };
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                })*;
              };
            };
            block "PAG" struct {
              uchar;
              taggedstruct {
                "FREEZE_SUPPORTED" ;
              };
            };
            block "PGM" struct {
              enum {
                "PGM_MODE_ABSOLUTE" = 1,
                "PGM_MODE_FUNCTIONAL" = 2,
                "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
              };
              uchar;
              uchar;
              taggedstruct {
                (block "SECTOR" struct {
                  char[101];
                  uchar;
                  ulong;
                  ulong;
                  uchar;
                  uchar;
                  uchar;
                })*;
                "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                  "BLOCK" taggedstruct {
                    "SLAVE" ;
                    "MASTER" struct {
                      uchar;
                      uchar;
                    };
                  };
                  "INTERLEAVED" uchar;
                };
              };
            };
            block "DAQ_EVENT" taggedunion {
              "FIXED_EVENT_LIST" taggedstruct {
                ("EVENT" uint)*;
              };
              "VARIABLE" taggedstruct {
                block "AVAILABLE_EVENT_LIST" taggedstruct {
                  ("EVENT" uint)*;
                };
                block "DEFAULT_EVENT_LIST" taggedstruct {
                  ("EVENT" uint)*;
                };
              };
            };
          };
          taggedstruct {
            block "XCP_ON_CAN" struct {
              struct {
                uint;
                taggedstruct {
                  "CAN_ID_BROADCAST" ulong;
                  "CAN_ID_MASTER" ulong;
                  "CAN_ID_SLAVE" ulong;
                  "BAUDRATE" ulong;
                  "SAMPLE_POINT" uchar;
                  "SAMPLE_RATE" enum {
                    "SINGLE" = 1,
                    "TRIPLE" = 3
                  };
                  "BTL_CYCLES" uchar;
                  "SJW" uchar;
                  "SYNC_EDGE" enum {
                    "SINGLE" = 1,
                    "DUAL" = 2
                  };
                  "MAX_DLC_REQUIRED" ;
                  (block "DAQ_LIST_CAN_ID" struct {
                    uint;
                    taggedstruct {
                      "VARIABLE" ;
                      "FIXED" ulong;
                    };
                  })*;
                };
              };
              taggedstruct {
                block "PROTOCOL_LAYER" struct {
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uchar;
                  uint;
                  enum {
                    "BYTE_ORDER_MSB_LAST" = 0,
                    "BYTE_ORDER_MSB_FIRST" = 1
                  };
                  enum {
                    "ADDRESS_GRANULARITY_BYTE" = 1,
                    "ADDRESS_GRANULARITY_WORD" = 2,
                    "ADDRESS_GRANULARITY_DWORD" = 4
                  };
                  taggedstruct {
                    ("OPTIONAL_CMD" enum {
                      "GET_COMM_MODE_INFO" = 251,
                      "GET_ID" = 250,
                      "SET_REQUEST" = 249,
                      "GET_SEED" = 248,
                      "UNLOCK" = 247,
                      "SET_MTA" = 246,
                      "UPLOAD" = 245,
                      "SHORT_UPLOAD" = 244,
                      "BUILD_CHECKSUM" = 243,
                      "TRANSPORT_LAYER_CMD" = 242,
                      "USER_CMD" = 241,
                      "DOWNLOAD" = 240,
                      "DOWNLOAD_NEXT" = 239,
                      "DOWNLOAD_MAX" = 238,
                      "SHORT_DOWNLOAD" = 237,
                      "MODIFY_BITS" = 236,
                      "SET_CAL_PAGE" = 235,
                      "GET_CAL_PAGE" = 234,
                      "GET_PAG_PROCESSOR_INFO" = 233,
                      "GET_SEGMENT_INFO" = 232,
                      "GET_PAGE_INFO" = 231,
                      "SET_SEGMENT_MODE" = 230,
                      "GET_SEGMENT_MODE" = 229,
                      "COPY_CAL_PAGE" = 228,
                      "CLEAR_DAQ_LIST" = 227,
                      "SET_DAQ_PTR" = 226,
                      "WRITE_DAQ" = 225,
                      "SET_DAQ_LIST_MODE" = 224,
                      "GET_DAQ_LIST_MODE" = 223,
                      "START_STOP_DAQ_LIST" = 222,
                      "START_STOP_SYNCH" = 221,
                      "GET_DAQ_CLOCK" = 220,
                      "READ_DAQ" = 219,
                      "GET_DAQ_PROCESSOR_INFO" = 218,
                      "GET_DAQ_RESOLUTION_INFO" = 217,
                      "GET_DAQ_LIST_INFO" = 216,
                      "GET_DAQ_EVENT_INFO" = 215,
                      "FREE_DAQ" = 214,
                      "ALLOC_DAQ" = 213,
                      "ALLOC_ODT" = 212,
                      "ALLOC_ODT_ENTRY" = 211,
                      "PROGRAM_START" = 210,
                      "PROGRAM_CLEAR" = 209,
                      "PROGRAM" = 208,
                      "PROGRAM_RESET" = 207,
                      "GET_PGM_PROCESSOR_INFO" = 206,
                      "GET_SECTOR_INFO" = 205,
                      "PROGRAM_PREPARE" = 204,
                      "PROGRAM_FORMAT" = 203,
                      "PROGRAM_NEXT" = 202,
                      "PROGRAM_MAX" = 201,
                      "PROGRAM_VERIFY" = 200
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                    "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
                  };
                };
                block "SEGMENT" struct {
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  taggedstruct {
                    block "CHECKSUM" struct {
                      enum {
                        "XCP_ADD_11" = 1,
                        "XCP_ADD_12" = 2,
                        "XCP_ADD_14" = 3,
                        "XCP_ADD_22" = 4,
                        "XCP_ADD_24" = 5,
                        "XCP_ADD_44" = 6,
                        "XCP_CRC_16" = 7,
                        "XCP_CRC_16_CITT" = 8,
                        "XCP_CRC_32" = 9,
                        "XCP_USER_DEFINED" = 255
                      };
                      taggedstruct {
                        "MAX_BLOCK_SIZE" ulong;
                        "EXTERNAL_FUNCTION" char[256];
                      };
                    };
                    (block "PAGE" struct {
                      uchar;
                      enum {
                        "ECU_ACCESS_NOT_ALLOWED" = 0,
                        "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                        "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                        "ECU_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_READ_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_WRITE_ACCESS_DONT_CARE" = 3
                      };
                      taggedstruct {
                        "INIT_SEGMENT" uchar;
                      };
                    })*;
                    (block "ADDRESS_MAPPING" struct {
                      ulong;
                      ulong;
                      ulong;
                    })*;
                    "PGM_VERIFY" ulong;
                  };
                };
                block "DAQ" struct {
                  enum {
                    "STATIC" = 0,
                    "DYNAMIC" = 1
                  };
                  uint;
                  uint;
                  uchar;
                  enum {
                    "OPTIMISATION_TYPE_DEFAULT" = 0,
                    "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                    "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                    "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                    "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                    "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
                  };
                  enum {
                    "ADDRESS_EXTENSION_FREE" = 0,
                    "ADDRESS_EXTENSION_ODT" = 1,
                    "ADDRESS_EXTENSION_DAQ" = 3
                  };
                  enum {
                    "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
                  };
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
                  };
                  uchar;
                  enum {
                    "NO_OVERLOAD_INDICATION" = 0,
                    "OVERLOAD_INDICATION_PID" = 1,
                    "OVERLOAD_INDICATION_EVENT" = 2
                  };
                  taggedstruct {
                    "PRESCALER_SUPPORTED" ;
                    "RESUME_SUPPORTED" ;
                    block "STIM" struct {
                      enum {
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                      };
                      uchar;
                      taggedstruct {
                        "BIT_STIM_SUPPORTED" ;
                      };
                    };
                    block "TIMESTAMP_SUPPORTED" struct {
                      uint;
                      enum {
                        "NO_TIME_STAMP" = 0,
                        "SIZE_BYTE" = 1,
                        "SIZE_WORD" = 2,
                        "SIZE_DWORD" = 4
                      };
                      enum {
                        "UNIT_1NS" = 0,
                        "UNIT_10NS" = 1,
                        "UNIT_100NS" = 2,
                        "UNIT_1US" = 3,
                        "UNIT_10US" = 4,
                        "UNIT_100US" = 5,
                        "UNIT_1MS" = 6,
                        "UNIT_10MS" = 7,
                        "UNIT_100MS" = 8,
                        "UNIT_1S" = 9
                      };
                      taggedstruct {
                        "TIMESTAMP_FIXED" ;
                      };
                    };
                    "PID_OFF_SUPPORTED" ;
                    (block "DAQ_LIST" struct {
                      uint;
                      taggedstruct {
                        "DAQ_LIST_TYPE" enum {
                          "DAQ" = 1,
                          "STIM" = 2,
                          "DAQ_STIM" = 3
                        };
                        "MAX_ODT" uchar;
                        "MAX_ODT_ENTRIES" uchar;
                        "FIRST_PID" uchar;
                        "EVENT_FIXED" uint;
                        block "PREDEFINED" taggedstruct {
                          (block "ODT" struct {
                            uchar;
                            taggedstruct {
                              ("ODT_ENTRY" struct {
                                uchar;
                                ulong;
                                uchar;
                                uchar;
                                uchar;
                              })*;
                            };
                          })*;
                        };
                      };
                    })*;
                    (block "EVENT" struct {
                      char[101];
                      char[9];
                      uint;
                      enum {
                        "DAQ" = 1,
                        "STIM" = 2,
                        "DAQ_STIM" = 3
                      };
                      uchar;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                  };
                };
                block "PAG" struct {
                  uchar;
                  taggedstruct {
                    "FREEZE_SUPPORTED" ;
                  };
                };
                block "PGM" struct {
                  enum {
                    "PGM_MODE_ABSOLUTE" = 1,
                    "PGM_MODE_FUNCTIONAL" = 2,
                    "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
                  };
                  uchar;
                  uchar;
                  taggedstruct {
                    (block "SECTOR" struct {
                      char[101];
                      uchar;
                      ulong;
                      ulong;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                  };
                };
                block "DAQ_EVENT" taggedunion {
                  "FIXED_EVENT_LIST" taggedstruct {
                    ("EVENT" uint)*;
                  };
                  "VARIABLE" taggedstruct {
                    block "AVAILABLE_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                    block "DEFAULT_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                  };
                };
              };
            };
            block "XCP_ON_SxI" struct {
              struct {
                uint;
                ulong;
                taggedstruct {
                  "ASYNCH_FULL_DUPLEX_MODE" struct {
                    enum {
                      "PARITY_NONE" = 0,
                      "PARITY_ODD" = 1,
                      "PARITY_EVEN" = 2
                    };
                    enum {
                      "ONE_STOP_BIT" = 1,
                      "TWO_STOP_BITS" = 2
                    };
                  };
                  "SYNCH_FULL_DUPLEX_MODE_BYTE" ;
                  "SYNCH_FULL_DUPLEX_MODE_WORD" ;
                  "SYNCH_FULL_DUPLEX_MODE_DWORD" ;
                  "SYNCH_MASTER_SLAVE_MODE_BYTE" ;
                  "SYNCH_MASTER_SLAVE_MODE_WORD" ;
                  "SYNCH_MASTER_SLAVE_MODE_DWORD" ;
                };
                enum {
                  "HEADER_LEN_BYTE" = 0,
                  "HEADER_LEN_CTR_BYTE" = 1,
                  "HEADER_LEN_FILL_BYTE" = 2,
                  "HEADER_LEN_WORD" = 3,
                  "HEADER_LEN_CTR_WORD" = 4,
                  "HEADER_LEN_FILL_WORD" = 5
                };
                enum {
                  "NO_CHECKSUM" = 0,
                  "CHECKSUM_BYTE" = 1,
                  "CHECKSUM_WORD" = 2
                };
              };
              taggedstruct {
                block "PROTOCOL_LAYER" struct {
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uchar;
                  uint;
                  enum {
                    "BYTE_ORDER_MSB_LAST" = 0,
                    "BYTE_ORDER_MSB_FIRST" = 1
                  };
                  enum {
                    "ADDRESS_GRANULARITY_BYTE" = 1,
                    "ADDRESS_GRANULARITY_WORD" = 2,
                    "ADDRESS_GRANULARITY_DWORD" = 4
                  };
                  taggedstruct {
                    ("OPTIONAL_CMD" enum {
                      "GET_COMM_MODE_INFO" = 251,
                      "GET_ID" = 250,
                      "SET_REQUEST" = 249,
                      "GET_SEED" = 248,
                      "UNLOCK" = 247,
                      "SET_MTA" = 246,
                      "UPLOAD" = 245,
                      "SHORT_UPLOAD" = 244,
                      "BUILD_CHECKSUM" = 243,
                      "TRANSPORT_LAYER_CMD" = 242,
                      "USER_CMD" = 241,
                      "DOWNLOAD" = 240,
                      "DOWNLOAD_NEXT" = 239,
                      "DOWNLOAD_MAX" = 238,
                      "SHORT_DOWNLOAD" = 237,
                      "MODIFY_BITS" = 236,
                      "SET_CAL_PAGE" = 235,
                      "GET_CAL_PAGE" = 234,
                      "GET_PAG_PROCESSOR_INFO" = 233,
                      "GET_SEGMENT_INFO" = 232,
                      "GET_PAGE_INFO" = 231,
                      "SET_SEGMENT_MODE" = 230,
                      "GET_SEGMENT_MODE" = 229,
                      "COPY_CAL_PAGE" = 228,
                      "CLEAR_DAQ_LIST" = 227,
                      "SET_DAQ_PTR" = 226,
                      "WRITE_DAQ" = 225,
                      "SET_DAQ_LIST_MODE" = 224,
                      "GET_DAQ_LIST_MODE" = 223,
                      "START_STOP_DAQ_LIST" = 222,
                      "START_STOP_SYNCH" = 221,
                      "GET_DAQ_CLOCK" = 220,
                      "READ_DAQ" = 219,
                      "GET_DAQ_PROCESSOR_INFO" = 218,
                      "GET_DAQ_RESOLUTION_INFO" = 217,
                      "GET_DAQ_LIST_INFO" = 216,
                      "GET_DAQ_EVENT_INFO" = 215,
                      "FREE_DAQ" = 214,
                      "ALLOC_DAQ" = 213,
                      "ALLOC_ODT" = 212,
                      "ALLOC_ODT_ENTRY" = 211,
                      "PROGRAM_START" = 210,
                      "PROGRAM_CLEAR" = 209,
                      "PROGRAM" = 208,
                      "PROGRAM_RESET" = 207,
                      "GET_PGM_PROCESSOR_INFO" = 206,
                      "GET_SECTOR_INFO" = 205,
                      "PROGRAM_PREPARE" = 204,
                      "PROGRAM_FORMAT" = 203,
                      "PROGRAM_NEXT" = 202,
                      "PROGRAM_MAX" = 201,
                      "PROGRAM_VERIFY" = 200
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                    "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
                  };
                };
                block "SEGMENT" struct {
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  taggedstruct {
                    block "CHECKSUM" struct {
                      enum {
                        "XCP_ADD_11" = 1,
                        "XCP_ADD_12" = 2,
                        "XCP_ADD_14" = 3,
                        "XCP_ADD_22" = 4,
                        "XCP_ADD_24" = 5,
                        "XCP_ADD_44" = 6,
                        "XCP_CRC_16" = 7,
                        "XCP_CRC_16_CITT" = 8,
                        "XCP_CRC_32" = 9,
                        "XCP_USER_DEFINED" = 255
                      };
                      taggedstruct {
                        "MAX_BLOCK_SIZE" ulong;
                        "EXTERNAL_FUNCTION" char[256];
                      };
                    };
                    (block "PAGE" struct {
                      uchar;
                      enum {
                        "ECU_ACCESS_NOT_ALLOWED" = 0,
                        "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                        "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                        "ECU_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_READ_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_WRITE_ACCESS_DONT_CARE" = 3
                      };
                      taggedstruct {
                        "INIT_SEGMENT" uchar;
                      };
                    })*;
                    (block "ADDRESS_MAPPING" struct {
                      ulong;
                      ulong;
                      ulong;
                    })*;
                    "PGM_VERIFY" ulong;
                  };
                };
                block "DAQ" struct {
                  enum {
                    "STATIC" = 0,
                    "DYNAMIC" = 1
                  };
                  uint;
                  uint;
                  uchar;
                  enum {
                    "OPTIMISATION_TYPE_DEFAULT" = 0,
                    "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                    "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                    "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                    "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                    "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
                  };
                  enum {
                    "ADDRESS_EXTENSION_FREE" = 0,
                    "ADDRESS_EXTENSION_ODT" = 1,
                    "ADDRESS_EXTENSION_DAQ" = 3
                  };
                  enum {
                    "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
                  };
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
                  };
                  uchar;
                  enum {
                    "NO_OVERLOAD_INDICATION" = 0,
                    "OVERLOAD_INDICATION_PID" = 1,
                    "OVERLOAD_INDICATION_EVENT" = 2
                  };
                  taggedstruct {
                    "PRESCALER_SUPPORTED" ;
                    "RESUME_SUPPORTED" ;
                    block "STIM" struct {
                      enum {
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                      };
                      uchar;
                      taggedstruct {
                        "BIT_STIM_SUPPORTED" ;
                      };
                    };
                    block "TIMESTAMP_SUPPORTED" struct {
                      uint;
                      enum {
                        "NO_TIME_STAMP" = 0,
                        "SIZE_BYTE" = 1,
                        "SIZE_WORD" = 2,
                        "SIZE_DWORD" = 4
                      };
                      enum {
                        "UNIT_1NS" = 0,
                        "UNIT_10NS" = 1,
                        "UNIT_100NS" = 2,
                        "UNIT_1US" = 3,
                        "UNIT_10US" = 4,
                        "UNIT_100US" = 5,
                        "UNIT_1MS" = 6,
                        "UNIT_10MS" = 7,
                        "UNIT_100MS" = 8,
                        "UNIT_1S" = 9
                      };
                      taggedstruct {
                        "TIMESTAMP_FIXED" ;
                      };
                    };
                    "PID_OFF_SUPPORTED" ;
                    (block "DAQ_LIST" struct {
                      uint;
                      taggedstruct {
                        "DAQ_LIST_TYPE" enum {
                          "DAQ" = 1,
                          "STIM" = 2,
                          "DAQ_STIM" = 3
                        };
                        "MAX_ODT" uchar;
                        "MAX_ODT_ENTRIES" uchar;
                        "FIRST_PID" uchar;
                        "EVENT_FIXED" uint;
                        block "PREDEFINED" taggedstruct {
                          (block "ODT" struct {
                            uchar;
                            taggedstruct {
                              ("ODT_ENTRY" struct {
                                uchar;
                                ulong;
                                uchar;
                                uchar;
                                uchar;
                              })*;
                            };
                          })*;
                        };
                      };
                    })*;
                    (block "EVENT" struct {
                      char[101];
                      char[9];
                      uint;
                      enum {
                        "DAQ" = 1,
                        "STIM" = 2,
                        "DAQ_STIM" = 3
                      };
                      uchar;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                  };
                };
                block "PAG" struct {
                  uchar;
                  taggedstruct {
                    "FREEZE_SUPPORTED" ;
                  };
                };
                block "PGM" struct {
                  enum {
                    "PGM_MODE_ABSOLUTE" = 1,
                    "PGM_MODE_FUNCTIONAL" = 2,
                    "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
                  };
                  uchar;
                  uchar;
                  taggedstruct {
                    (block "SECTOR" struct {
                      char[101];
                      uchar;
                      ulong;
                      ulong;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                  };
                };
                block "DAQ_EVENT" taggedunion {
                  "FIXED_EVENT_LIST" taggedstruct {
                    ("EVENT" uint)*;
                  };
                  "VARIABLE" taggedstruct {
                    block "AVAILABLE_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                    block "DEFAULT_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                  };
                };
              };
            };
            block "XCP_ON_TCP_IP" struct {
              struct {
                uint;
                uint;
                taggedunion {
                  "HOST_NAME" char[256];
                  "ADDRESS" char[15];
                };
              };
              taggedstruct {
                block "PROTOCOL_LAYER" struct {
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uchar;
                  uint;
                  enum {
                    "BYTE_ORDER_MSB_LAST" = 0,
                    "BYTE_ORDER_MSB_FIRST" = 1
                  };
                  enum {
                    "ADDRESS_GRANULARITY_BYTE" = 1,
                    "ADDRESS_GRANULARITY_WORD" = 2,
                    "ADDRESS_GRANULARITY_DWORD" = 4
                  };
                  taggedstruct {
                    ("OPTIONAL_CMD" enum {
                      "GET_COMM_MODE_INFO" = 251,
                      "GET_ID" = 250,
                      "SET_REQUEST" = 249,
                      "GET_SEED" = 248,
                      "UNLOCK" = 247,
                      "SET_MTA" = 246,
                      "UPLOAD" = 245,
                      "SHORT_UPLOAD" = 244,
                      "BUILD_CHECKSUM" = 243,
                      "TRANSPORT_LAYER_CMD" = 242,
                      "USER_CMD" = 241,
                      "DOWNLOAD" = 240,
                      "DOWNLOAD_NEXT" = 239,
                      "DOWNLOAD_MAX" = 238,
                      "SHORT_DOWNLOAD" = 237,
                      "MODIFY_BITS" = 236,
                      "SET_CAL_PAGE" = 235,
                      "GET_CAL_PAGE" = 234,
                      "GET_PAG_PROCESSOR_INFO" = 233,
                      "GET_SEGMENT_INFO" = 232,
                      "GET_PAGE_INFO" = 231,
                      "SET_SEGMENT_MODE" = 230,
                      "GET_SEGMENT_MODE" = 229,
                      "COPY_CAL_PAGE" = 228,
                      "CLEAR_DAQ_LIST" = 227,
                      "SET_DAQ_PTR" = 226,
                      "WRITE_DAQ" = 225,
                      "SET_DAQ_LIST_MODE" = 224,
                      "GET_DAQ_LIST_MODE" = 223,
                      "START_STOP_DAQ_LIST" = 222,
                      "START_STOP_SYNCH" = 221,
                      "GET_DAQ_CLOCK" = 220,
                      "READ_DAQ" = 219,
                      "GET_DAQ_PROCESSOR_INFO" = 218,
                      "GET_DAQ_RESOLUTION_INFO" = 217,
                      "GET_DAQ_LIST_INFO" = 216,
                      "GET_DAQ_EVENT_INFO" = 215,
                      "FREE_DAQ" = 214,
                      "ALLOC_DAQ" = 213,
                      "ALLOC_ODT" = 212,
                      "ALLOC_ODT_ENTRY" = 211,
                      "PROGRAM_START" = 210,
                      "PROGRAM_CLEAR" = 209,
                      "PROGRAM" = 208,
                      "PROGRAM_RESET" = 207,
                      "GET_PGM_PROCESSOR_INFO" = 206,
                      "GET_SECTOR_INFO" = 205,
                      "PROGRAM_PREPARE" = 204,
                      "PROGRAM_FORMAT" = 203,
                      "PROGRAM_NEXT" = 202,
                      "PROGRAM_MAX" = 201,
                      "PROGRAM_VERIFY" = 200
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                    "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
                  };
                };
                block "SEGMENT" struct {
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  taggedstruct {
                    block "CHECKSUM" struct {
                      enum {
                        "XCP_ADD_11" = 1,
                        "XCP_ADD_12" = 2,
                        "XCP_ADD_14" = 3,
                        "XCP_ADD_22" = 4,
                        "XCP_ADD_24" = 5,
                        "XCP_ADD_44" = 6,
                        "XCP_CRC_16" = 7,
                        "XCP_CRC_16_CITT" = 8,
                        "XCP_CRC_32" = 9,
                        "XCP_USER_DEFINED" = 255
                      };
                      taggedstruct {
                        "MAX_BLOCK_SIZE" ulong;
                        "EXTERNAL_FUNCTION" char[256];
                      };
                    };
                    (block "PAGE" struct {
                      uchar;
                      enum {
                        "ECU_ACCESS_NOT_ALLOWED" = 0,
                        "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                        "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                        "ECU_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_READ_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_WRITE_ACCESS_DONT_CARE" = 3
                      };
                      taggedstruct {
                        "INIT_SEGMENT" uchar;
                      };
                    })*;
                    (block "ADDRESS_MAPPING" struct {
                      ulong;
                      ulong;
                      ulong;
                    })*;
                    "PGM_VERIFY" ulong;
                  };
                };
                block "DAQ" struct {
                  enum {
                    "STATIC" = 0,
                    "DYNAMIC" = 1
                  };
                  uint;
                  uint;
                  uchar;
                  enum {
                    "OPTIMISATION_TYPE_DEFAULT" = 0,
                    "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                    "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                    "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                    "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                    "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
                  };
                  enum {
                    "ADDRESS_EXTENSION_FREE" = 0,
                    "ADDRESS_EXTENSION_ODT" = 1,
                    "ADDRESS_EXTENSION_DAQ" = 3
                  };
                  enum {
                    "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
                  };
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
                  };
                  uchar;
                  enum {
                    "NO_OVERLOAD_INDICATION" = 0,
                    "OVERLOAD_INDICATION_PID" = 1,
                    "OVERLOAD_INDICATION_EVENT" = 2
                  };
                  taggedstruct {
                    "PRESCALER_SUPPORTED" ;
                    "RESUME_SUPPORTED" ;
                    block "STIM" struct {
                      enum {
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                      };
                      uchar;
                      taggedstruct {
                        "BIT_STIM_SUPPORTED" ;
                      };
                    };
                    block "TIMESTAMP_SUPPORTED" struct {
                      uint;
                      enum {
                        "NO_TIME_STAMP" = 0,
                        "SIZE_BYTE" = 1,
                        "SIZE_WORD" = 2,
                        "SIZE_DWORD" = 4
                      };
                      enum {
                        "UNIT_1NS" = 0,
                        "UNIT_10NS" = 1,
                        "UNIT_100NS" = 2,
                        "UNIT_1US" = 3,
                        "UNIT_10US" = 4,
                        "UNIT_100US" = 5,
                        "UNIT_1MS" = 6,
                        "UNIT_10MS" = 7,
                        "UNIT_100MS" = 8,
                        "UNIT_1S" = 9
                      };
                      taggedstruct {
                        "TIMESTAMP_FIXED" ;
                      };
                    };
                    "PID_OFF_SUPPORTED" ;
                    (block "DAQ_LIST" struct {
                      uint;
                      taggedstruct {
                        "DAQ_LIST_TYPE" enum {
                          "DAQ" = 1,
                          "STIM" = 2,
                          "DAQ_STIM" = 3
                        };
                        "MAX_ODT" uchar;
                        "MAX_ODT_ENTRIES" uchar;
                        "FIRST_PID" uchar;
                        "EVENT_FIXED" uint;
                        block "PREDEFINED" taggedstruct {
                          (block "ODT" struct {
                            uchar;
                            taggedstruct {
                              ("ODT_ENTRY" struct {
                                uchar;
                                ulong;
                                uchar;
                                uchar;
                                uchar;
                              })*;
                            };
                          })*;
                        };
                      };
                    })*;
                    (block "EVENT" struct {
                      char[101];
                      char[9];
                      uint;
                      enum {
                        "DAQ" = 1,
                        "STIM" = 2,
                        "DAQ_STIM" = 3
                      };
                      uchar;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                  };
                };
                block "PAG" struct {
                  uchar;
                  taggedstruct {
                    "FREEZE_SUPPORTED" ;
                  };
                };
                block "PGM" struct {
                  enum {
                    "PGM_MODE_ABSOLUTE" = 1,
                    "PGM_MODE_FUNCTIONAL" = 2,
                    "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
                  };
                  uchar;
                  uchar;
                  taggedstruct {
                    (block "SECTOR" struct {
                      char[101];
                      uchar;
                      ulong;
                      ulong;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                  };
                };
                block "DAQ_EVENT" taggedunion {
                  "FIXED_EVENT_LIST" taggedstruct {
                    ("EVENT" uint)*;
                  };
                  "VARIABLE" taggedstruct {
                    block "AVAILABLE_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                    block "DEFAULT_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                  };
                };
              };
            };
            block "XCP_ON_UDP_IP" struct {
              struct {
                uint;
                uint;
                taggedunion {
                  "HOST_NAME" char[256];
                  "ADDRESS" char[15];
                };
              };
              taggedstruct {
                block "PROTOCOL_LAYER" struct {
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uchar;
                  uint;
                  enum {
                    "BYTE_ORDER_MSB_LAST" = 0,
                    "BYTE_ORDER_MSB_FIRST" = 1
                  };
                  enum {
                    "ADDRESS_GRANULARITY_BYTE" = 1,
                    "ADDRESS_GRANULARITY_WORD" = 2,
                    "ADDRESS_GRANULARITY_DWORD" = 4
                  };
                  taggedstruct {
                    ("OPTIONAL_CMD" enum {
                      "GET_COMM_MODE_INFO" = 251,
                      "GET_ID" = 250,
                      "SET_REQUEST" = 249,
                      "GET_SEED" = 248,
                      "UNLOCK" = 247,
                      "SET_MTA" = 246,
                      "UPLOAD" = 245,
                      "SHORT_UPLOAD" = 244,
                      "BUILD_CHECKSUM" = 243,
                      "TRANSPORT_LAYER_CMD" = 242,
                      "USER_CMD" = 241,
                      "DOWNLOAD" = 240,
                      "DOWNLOAD_NEXT" = 239,
                      "DOWNLOAD_MAX" = 238,
                      "SHORT_DOWNLOAD" = 237,
                      "MODIFY_BITS" = 236,
                      "SET_CAL_PAGE" = 235,
                      "GET_CAL_PAGE" = 234,
                      "GET_PAG_PROCESSOR_INFO" = 233,
                      "GET_SEGMENT_INFO" = 232,
                      "GET_PAGE_INFO" = 231,
                      "SET_SEGMENT_MODE" = 230,
                      "GET_SEGMENT_MODE" = 229,
                      "COPY_CAL_PAGE" = 228,
                      "CLEAR_DAQ_LIST" = 227,
                      "SET_DAQ_PTR" = 226,
                      "WRITE_DAQ" = 225,
                      "SET_DAQ_LIST_MODE" = 224,
                      "GET_DAQ_LIST_MODE" = 223,
                      "START_STOP_DAQ_LIST" = 222,
                      "START_STOP_SYNCH" = 221,
                      "GET_DAQ_CLOCK" = 220,
                      "READ_DAQ" = 219,
                      "GET_DAQ_PROCESSOR_INFO" = 218,
                      "GET_DAQ_RESOLUTION_INFO" = 217,
                      "GET_DAQ_LIST_INFO" = 216,
                      "GET_DAQ_EVENT_INFO" = 215,
                      "FREE_DAQ" = 214,
                      "ALLOC_DAQ" = 213,
                      "ALLOC_ODT" = 212,
                      "ALLOC_ODT_ENTRY" = 211,
                      "PROGRAM_START" = 210,
                      "PROGRAM_CLEAR" = 209,
                      "PROGRAM" = 208,
                      "PROGRAM_RESET" = 207,
                      "GET_PGM_PROCESSOR_INFO" = 206,
                      "GET_SECTOR_INFO" = 205,
                      "PROGRAM_PREPARE" = 204,
                      "PROGRAM_FORMAT" = 203,
                      "PROGRAM_NEXT" = 202,
                      "PROGRAM_MAX" = 201,
                      "PROGRAM_VERIFY" = 200
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                    "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
                  };
                };
                block "SEGMENT" struct {
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  taggedstruct {
                    block "CHECKSUM" struct {
                      enum {
                        "XCP_ADD_11" = 1,
                        "XCP_ADD_12" = 2,
                        "XCP_ADD_14" = 3,
                        "XCP_ADD_22" = 4,
                        "XCP_ADD_24" = 5,
                        "XCP_ADD_44" = 6,
                        "XCP_CRC_16" = 7,
                        "XCP_CRC_16_CITT" = 8,
                        "XCP_CRC_32" = 9,
                        "XCP_USER_DEFINED" = 255
                      };
                      taggedstruct {
                        "MAX_BLOCK_SIZE" ulong;
                        "EXTERNAL_FUNCTION" char[256];
                      };
                    };
                    (block "PAGE" struct {
                      uchar;
                      enum {
                        "ECU_ACCESS_NOT_ALLOWED" = 0,
                        "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                        "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                        "ECU_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_READ_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_WRITE_ACCESS_DONT_CARE" = 3
                      };
                      taggedstruct {
                        "INIT_SEGMENT" uchar;
                      };
                    })*;
                    (block "ADDRESS_MAPPING" struct {
                      ulong;
                      ulong;
                      ulong;
                    })*;
                    "PGM_VERIFY" ulong;
                  };
                };
                block "DAQ" struct {
                  enum {
                    "STATIC" = 0,
                    "DYNAMIC" = 1
                  };
                  uint;
                  uint;
                  uchar;
                  enum {
                    "OPTIMISATION_TYPE_DEFAULT" = 0,
                    "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                    "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                    "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                    "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                    "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
                  };
                  enum {
                    "ADDRESS_EXTENSION_FREE" = 0,
                    "ADDRESS_EXTENSION_ODT" = 1,
                    "ADDRESS_EXTENSION_DAQ" = 3
                  };
                  enum {
                    "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
                  };
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
                  };
                  uchar;
                  enum {
                    "NO_OVERLOAD_INDICATION" = 0,
                    "OVERLOAD_INDICATION_PID" = 1,
                    "OVERLOAD_INDICATION_EVENT" = 2
                  };
                  taggedstruct {
                    "PRESCALER_SUPPORTED" ;
                    "RESUME_SUPPORTED" ;
                    block "STIM" struct {
                      enum {
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                      };
                      uchar;
                      taggedstruct {
                        "BIT_STIM_SUPPORTED" ;
                      };
                    };
                    block "TIMESTAMP_SUPPORTED" struct {
                      uint;
                      enum {
                        "NO_TIME_STAMP" = 0,
                        "SIZE_BYTE" = 1,
                        "SIZE_WORD" = 2,
                        "SIZE_DWORD" = 4
                      };
                      enum {
                        "UNIT_1NS" = 0,
                        "UNIT_10NS" = 1,
                        "UNIT_100NS" = 2,
                        "UNIT_1US" = 3,
                        "UNIT_10US" = 4,
                        "UNIT_100US" = 5,
                        "UNIT_1MS" = 6,
                        "UNIT_10MS" = 7,
                        "UNIT_100MS" = 8,
                        "UNIT_1S" = 9
                      };
                      taggedstruct {
                        "TIMESTAMP_FIXED" ;
                      };
                    };
                    "PID_OFF_SUPPORTED" ;
                    (block "DAQ_LIST" struct {
                      uint;
                      taggedstruct {
                        "DAQ_LIST_TYPE" enum {
                          "DAQ" = 1,
                          "STIM" = 2,
                          "DAQ_STIM" = 3
                        };
                        "MAX_ODT" uchar;
                        "MAX_ODT_ENTRIES" uchar;
                        "FIRST_PID" uchar;
                        "EVENT_FIXED" uint;
                        block "PREDEFINED" taggedstruct {
                          (block "ODT" struct {
                            uchar;
                            taggedstruct {
                              ("ODT_ENTRY" struct {
                                uchar;
                                ulong;
                                uchar;
                                uchar;
                                uchar;
                              })*;
                            };
                          })*;
                        };
                      };
                    })*;
                    (block "EVENT" struct {
                      char[101];
                      char[9];
                      uint;
                      enum {
                        "DAQ" = 1,
                        "STIM" = 2,
                        "DAQ_STIM" = 3
                      };
                      uchar;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                  };
                };
                block "PAG" struct {
                  uchar;
                  taggedstruct {
                    "FREEZE_SUPPORTED" ;
                  };
                };
                block "PGM" struct {
                  enum {
                    "PGM_MODE_ABSOLUTE" = 1,
                    "PGM_MODE_FUNCTIONAL" = 2,
                    "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
                  };
                  uchar;
                  uchar;
                  taggedstruct {
                    (block "SECTOR" struct {
                      char[101];
                      uchar;
                      ulong;
                      ulong;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                  };
                };
                block "DAQ_EVENT" taggedunion {
                  "FIXED_EVENT_LIST" taggedstruct {
                    ("EVENT" uint)*;
                  };
                  "VARIABLE" taggedstruct {
                    block "AVAILABLE_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                    block "DEFAULT_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                  };
                };
              };
            };
            block "XCP_ON_USB" struct {
              struct {
                uint;
                uint;
                uint;
                uchar;
                enum {
                  "HEADER_LEN_BYTE" = 0,
                  "HEADER_LEN_CTR_BYTE" = 1,
                  "HEADER_LEN_FILL_BYTE" = 2,
                  "HEADER_LEN_WORD" = 3,
                  "HEADER_LEN_CTR_WORD" = 4,
                  "HEADER_LEN_FILL_WORD" = 5
                };
                taggedunion {
                  block "OUT_EP_CMD_STIM" struct {
                    uchar;
                    enum {
                      "BULK_TRANSFER" = 2,
                      "INTERRUPT_TRANSFER" = 3
                    };
                    uint;
                    uchar;
                    enum {
                      "MESSAGE_PACKING_SINGLE" = 0,
                      "MESSAGE_PACKING_MULTIPLE" = 1,
                      "MESSAGE_PACKING_STREAMING" = 2
                    };
                    enum {
                      "ALIGNMENT_8_BIT" = 0,
                      "ALIGNMENT_16_BIT" = 1,
                      "ALIGNMENT_32_BIT" = 2,
                      "ALIGNMENT_64_BIT" = 3
                    };
                    taggedstruct {
                      "RECOMMENDED_HOST_BUFSIZE" uint;
                    };
                  };
                };
                taggedunion {
                  block "IN_EP_RESERR_DAQ_EVSERV" struct {
                    uchar;
                    enum {
                      "BULK_TRANSFER" = 2,
                      "INTERRUPT_TRANSFER" = 3
                    };
                    uint;
                    uchar;
                    enum {
                      "MESSAGE_PACKING_SINGLE" = 0,
                      "MESSAGE_PACKING_MULTIPLE" = 1,
                      "MESSAGE_PACKING_STREAMING" = 2
                    };
                    enum {
                      "ALIGNMENT_8_BIT" = 0,
                      "ALIGNMENT_16_BIT" = 1,
                      "ALIGNMENT_32_BIT" = 2,
                      "ALIGNMENT_64_BIT" = 3
                    };
                    taggedstruct {
                      "RECOMMENDED_HOST_BUFSIZE" uint;
                    };
                  };
                };
                taggedstruct {
                  "ALTERNATE_SETTING_NO" uchar;
                  "INTERFACE_STRING_DESCRIPTOR" char[101];
                  (block "OUT_EP_ONLY_STIM" struct {
                    uchar;
                    enum {
                      "BULK_TRANSFER" = 2,
                      "INTERRUPT_TRANSFER" = 3
                    };
                    uint;
                    uchar;
                    enum {
                      "MESSAGE_PACKING_SINGLE" = 0,
                      "MESSAGE_PACKING_MULTIPLE" = 1,
                      "MESSAGE_PACKING_STREAMING" = 2
                    };
                    enum {
                      "ALIGNMENT_8_BIT" = 0,
                      "ALIGNMENT_16_BIT" = 1,
                      "ALIGNMENT_32_BIT" = 2,
                      "ALIGNMENT_64_BIT" = 3
                    };
                    taggedstruct {
                      "RECOMMENDED_HOST_BUFSIZE" uint;
                    };
                  })*;
                  (block "IN_EP_ONLY_DAQ" struct {
                    uchar;
                    enum {
                      "BULK_TRANSFER" = 2,
                      "INTERRUPT_TRANSFER" = 3
                    };
                    uint;
                    uchar;
                    enum {
                      "MESSAGE_PACKING_SINGLE" = 0,
                      "MESSAGE_PACKING_MULTIPLE" = 1,
                      "MESSAGE_PACKING_STREAMING" = 2
                    };
                    enum {
                      "ALIGNMENT_8_BIT" = 0,
                      "ALIGNMENT_16_BIT" = 1,
                      "ALIGNMENT_32_BIT" = 2,
                      "ALIGNMENT_64_BIT" = 3
                    };
                    taggedstruct {
                      "RECOMMENDED_HOST_BUFSIZE" uint;
                    };
                  })*;
                  block "IN_EP_ONLY_EVSERV" struct {
                    uchar;
                    enum {
                      "BULK_TRANSFER" = 2,
                      "INTERRUPT_TRANSFER" = 3
                    };
                    uint;
                    uchar;
                    enum {
                      "MESSAGE_PACKING_SINGLE" = 0,
                      "MESSAGE_PACKING_MULTIPLE" = 1,
                      "MESSAGE_PACKING_STREAMING" = 2
                    };
                    enum {
                      "ALIGNMENT_8_BIT" = 0,
                      "ALIGNMENT_16_BIT" = 1,
                      "ALIGNMENT_32_BIT" = 2,
                      "ALIGNMENT_64_BIT" = 3
                    };
                    taggedstruct {
                      "RECOMMENDED_HOST_BUFSIZE" uint;
                    };
                  };
                  (block "DAQ_LIST_USB_ENDPOINT" struct {
                    uint;
                    taggedstruct {
                      "FIXED_IN" uchar;
                      "FIXED_OUT" uchar;
                    };
                  })*;
                };
              };
              taggedstruct {
                block "PROTOCOL_LAYER" struct {
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uchar;
                  uint;
                  enum {
                    "BYTE_ORDER_MSB_LAST" = 0,
                    "BYTE_ORDER_MSB_FIRST" = 1
                  };
                  enum {
                    "ADDRESS_GRANULARITY_BYTE" = 1,
                    "ADDRESS_GRANULARITY_WORD" = 2,
                    "ADDRESS_GRANULARITY_DWORD" = 4
                  };
                  taggedstruct {
                    ("OPTIONAL_CMD" enum {
                      "GET_COMM_MODE_INFO" = 251,
                      "GET_ID" = 250,
                      "SET_REQUEST" = 249,
                      "GET_SEED" = 248,
                      "UNLOCK" = 247,
                      "SET_MTA" = 246,
                      "UPLOAD" = 245,
                      "SHORT_UPLOAD" = 244,
                      "BUILD_CHECKSUM" = 243,
                      "TRANSPORT_LAYER_CMD" = 242,
                      "USER_CMD" = 241,
                      "DOWNLOAD" = 240,
                      "DOWNLOAD_NEXT" = 239,
                      "DOWNLOAD_MAX" = 238,
                      "SHORT_DOWNLOAD" = 237,
                      "MODIFY_BITS" = 236,
                      "SET_CAL_PAGE" = 235,
                      "GET_CAL_PAGE" = 234,
                      "GET_PAG_PROCESSOR_INFO" = 233,
                      "GET_SEGMENT_INFO" = 232,
                      "GET_PAGE_INFO" = 231,
                      "SET_SEGMENT_MODE" = 230,
                      "GET_SEGMENT_MODE" = 229,
                      "COPY_CAL_PAGE" = 228,
                      "CLEAR_DAQ_LIST" = 227,
                      "SET_DAQ_PTR" = 226,
                      "WRITE_DAQ" = 225,
                      "SET_DAQ_LIST_MODE" = 224,
                      "GET_DAQ_LIST_MODE" = 223,
                      "START_STOP_DAQ_LIST" = 222,
                      "START_STOP_SYNCH" = 221,
                      "GET_DAQ_CLOCK" = 220,
                      "READ_DAQ" = 219,
                      "GET_DAQ_PROCESSOR_INFO" = 218,
                      "GET_DAQ_RESOLUTION_INFO" = 217,
                      "GET_DAQ_LIST_INFO" = 216,
                      "GET_DAQ_EVENT_INFO" = 215,
                      "FREE_DAQ" = 214,
                      "ALLOC_DAQ" = 213,
                      "ALLOC_ODT" = 212,
                      "ALLOC_ODT_ENTRY" = 211,
                      "PROGRAM_START" = 210,
                      "PROGRAM_CLEAR" = 209,
                      "PROGRAM" = 208,
                      "PROGRAM_RESET" = 207,
                      "GET_PGM_PROCESSOR_INFO" = 206,
                      "GET_SECTOR_INFO" = 205,
                      "PROGRAM_PREPARE" = 204,
                      "PROGRAM_FORMAT" = 203,
                      "PROGRAM_NEXT" = 202,
                      "PROGRAM_MAX" = 201,
                      "PROGRAM_VERIFY" = 200
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                    "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
                  };
                };
                block "SEGMENT" struct {
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  taggedstruct {
                    block "CHECKSUM" struct {
                      enum {
                        "XCP_ADD_11" = 1,
                        "XCP_ADD_12" = 2,
                        "XCP_ADD_14" = 3,
                        "XCP_ADD_22" = 4,
                        "XCP_ADD_24" = 5,
                        "XCP_ADD_44" = 6,
                        "XCP_CRC_16" = 7,
                        "XCP_CRC_16_CITT" = 8,
                        "XCP_CRC_32" = 9,
                        "XCP_USER_DEFINED" = 255
                      };
                      taggedstruct {
                        "MAX_BLOCK_SIZE" ulong;
                        "EXTERNAL_FUNCTION" char[256];
                      };
                    };
                    (block "PAGE" struct {
                      uchar;
                      enum {
                        "ECU_ACCESS_NOT_ALLOWED" = 0,
                        "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                        "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                        "ECU_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_READ_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_WRITE_ACCESS_DONT_CARE" = 3
                      };
                      taggedstruct {
                        "INIT_SEGMENT" uchar;
                      };
                    })*;
                    (block "ADDRESS_MAPPING" struct {
                      ulong;
                      ulong;
                      ulong;
                    })*;
                    "PGM_VERIFY" ulong;
                  };
                };
                block "DAQ" struct {
                  enum {
                    "STATIC" = 0,
                    "DYNAMIC" = 1
                  };
                  uint;
                  uint;
                  uchar;
                  enum {
                    "OPTIMISATION_TYPE_DEFAULT" = 0,
                    "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                    "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                    "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                    "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                    "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
                  };
                  enum {
                    "ADDRESS_EXTENSION_FREE" = 0,
                    "ADDRESS_EXTENSION_ODT" = 1,
                    "ADDRESS_EXTENSION_DAQ" = 3
                  };
                  enum {
                    "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
                  };
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
                  };
                  uchar;
                  enum {
                    "NO_OVERLOAD_INDICATION" = 0,
                    "OVERLOAD_INDICATION_PID" = 1,
                    "OVERLOAD_INDICATION_EVENT" = 2
                  };
                  taggedstruct {
                    "PRESCALER_SUPPORTED" ;
                    "RESUME_SUPPORTED" ;
                    block "STIM" struct {
                      enum {
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                      };
                      uchar;
                      taggedstruct {
                        "BIT_STIM_SUPPORTED" ;
                      };
                    };
                    block "TIMESTAMP_SUPPORTED" struct {
                      uint;
                      enum {
                        "NO_TIME_STAMP" = 0,
                        "SIZE_BYTE" = 1,
                        "SIZE_WORD" = 2,
                        "SIZE_DWORD" = 4
                      };
                      enum {
                        "UNIT_1NS" = 0,
                        "UNIT_10NS" = 1,
                        "UNIT_100NS" = 2,
                        "UNIT_1US" = 3,
                        "UNIT_10US" = 4,
                        "UNIT_100US" = 5,
                        "UNIT_1MS" = 6,
                        "UNIT_10MS" = 7,
                        "UNIT_100MS" = 8,
                        "UNIT_1S" = 9
                      };
                      taggedstruct {
                        "TIMESTAMP_FIXED" ;
                      };
                    };
                    "PID_OFF_SUPPORTED" ;
                    (block "DAQ_LIST" struct {
                      uint;
                      taggedstruct {
                        "DAQ_LIST_TYPE" enum {
                          "DAQ" = 1,
                          "STIM" = 2,
                          "DAQ_STIM" = 3
                        };
                        "MAX_ODT" uchar;
                        "MAX_ODT_ENTRIES" uchar;
                        "FIRST_PID" uchar;
                        "EVENT_FIXED" uint;
                        block "PREDEFINED" taggedstruct {
                          (block "ODT" struct {
                            uchar;
                            taggedstruct {
                              ("ODT_ENTRY" struct {
                                uchar;
                                ulong;
                                uchar;
                                uchar;
                                uchar;
                              })*;
                            };
                          })*;
                        };
                      };
                    })*;
                    (block "EVENT" struct {
                      char[101];
                      char[9];
                      uint;
                      enum {
                        "DAQ" = 1,
                        "STIM" = 2,
                        "DAQ_STIM" = 3
                      };
                      uchar;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                  };
                };
                block "PAG" struct {
                  uchar;
                  taggedstruct {
                    "FREEZE_SUPPORTED" ;
                  };
                };
                block "PGM" struct {
                  enum {
                    "PGM_MODE_ABSOLUTE" = 1,
                    "PGM_MODE_FUNCTIONAL" = 2,
                    "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
                  };
                  uchar;
                  uchar;
                  taggedstruct {
                    (block "SECTOR" struct {
                      char[101];
                      uchar;
                      ulong;
                      ulong;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                  };
                };
                block "DAQ_EVENT" taggedunion {
                  "FIXED_EVENT_LIST" taggedstruct {
                    ("EVENT" uint)*;
                  };
                  "VARIABLE" taggedstruct {
                    block "AVAILABLE_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                    block "DEFAULT_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                  };
                };
              };
            };
            block "XCP_ON_FLX" struct {
              struct {
                uint;
                uint;
                char[256];
                char[256];
                uchar;
                enum {
                  "HEADER_NAX" = 0,
                  "HEADER_NAX_FILL" = 1,
                  "HEADER_NAX_CTR" = 2,
                  "HEADER_NAX_FILL3" = 3,
                  "HEADER_NAX_CTR_FILL2" = 4,
                  "HEADER_NAX_LEN" = 5,
                  "HEADER_NAX_CTR_LEN" = 6,
                  "HEADER_NAX_FILL2_LEN" = 7,
                  "HEADER_NAX_CTR_FILL_LEN" = 8
                };
                enum {
                  "PACKET_ALIGNMENT_8" = 0,
                  "PACKET_ALIGNMENT_16" = 1,
                  "PACKET_ALIGNMENT_32" = 2
                };
                taggedunion {
                  block "INITIAL_CMD_BUFFER" struct {
                    uchar;
                    taggedstruct {
                      "MAX_FLX_LEN_BUF" taggedunion {
                        "FIXED" uchar;
                        "VARIABLE" uchar;
                      };
                      block "LPDU_ID" taggedstruct {
                        "FLX_SLOT_ID" taggedunion {
                          "FIXED" uint;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uint;
                          };
                        };
                        "OFFSET" taggedunion {
                          "FIXED" uchar;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uchar;
                          };
                        };
                        "CYCLE_REPETITION" taggedunion {
                          "FIXED" uchar;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uchar;
                          };
                        };
                        "CHANNEL" taggedunion {
                          "FIXED" enum {
                            "A" = 0,
                            "B" = 1
                          };
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" enum {
                              "A" = 0,
                              "B" = 1
                            };
                          };
                        };
                      };
                      block "XCP_PACKET" taggedstruct {
                        "CMD" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "RES_ERR" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "EV_SERV" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "DAQ" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "STIM" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                      };
                    };
                  };
                };
                taggedunion {
                  block "INITIAL_RES_ERR_BUFFER" struct {
                    uchar;
                    taggedstruct {
                      "MAX_FLX_LEN_BUF" taggedunion {
                        "FIXED" uchar;
                        "VARIABLE" uchar;
                      };
                      block "LPDU_ID" taggedstruct {
                        "FLX_SLOT_ID" taggedunion {
                          "FIXED" uint;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uint;
                          };
                        };
                        "OFFSET" taggedunion {
                          "FIXED" uchar;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uchar;
                          };
                        };
                        "CYCLE_REPETITION" taggedunion {
                          "FIXED" uchar;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uchar;
                          };
                        };
                        "CHANNEL" taggedunion {
                          "FIXED" enum {
                            "A" = 0,
                            "B" = 1
                          };
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" enum {
                              "A" = 0,
                              "B" = 1
                            };
                          };
                        };
                      };
                      block "XCP_PACKET" taggedstruct {
                        "CMD" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "RES_ERR" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "EV_SERV" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "DAQ" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "STIM" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                      };
                    };
                  };
                };
                taggedstruct {
                  (block "POOL_BUFFER" struct {
                    uchar;
                    taggedstruct {
                      "MAX_FLX_LEN_BUF" taggedunion {
                        "FIXED" uchar;
                        "VARIABLE" uchar;
                      };
                      block "LPDU_ID" taggedstruct {
                        "FLX_SLOT_ID" taggedunion {
                          "FIXED" uint;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uint;
                          };
                        };
                        "OFFSET" taggedunion {
                          "FIXED" uchar;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uchar;
                          };
                        };
                        "CYCLE_REPETITION" taggedunion {
                          "FIXED" uchar;
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" uchar;
                          };
                        };
                        "CHANNEL" taggedunion {
                          "FIXED" enum {
                            "A" = 0,
                            "B" = 1
                          };
                          "VARIABLE" taggedstruct {
                            "INITIAL_VALUE" enum {
                              "A" = 0,
                              "B" = 1
                            };
                          };
                        };
                      };
                      block "XCP_PACKET" taggedstruct {
                        "CMD" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "RES_ERR" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "EV_SERV" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "DAQ" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                        "STIM" enum {
                          "NOT_ALLOWED" = 0,
                          "FIXED" = 1,
                          "VARIABLE_INITIALISED" = 2,
                          "VARIABLE" = 3
                        };
                      };
                    };
                  })*;
                };
              };
              taggedstruct {
                block "PROTOCOL_LAYER" struct {
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uint;
                  uchar;
                  uint;
                  enum {
                    "BYTE_ORDER_MSB_LAST" = 0,
                    "BYTE_ORDER_MSB_FIRST" = 1
                  };
                  enum {
                    "ADDRESS_GRANULARITY_BYTE" = 1,
                    "ADDRESS_GRANULARITY_WORD" = 2,
                    "ADDRESS_GRANULARITY_DWORD" = 4
                  };
                  taggedstruct {
                    ("OPTIONAL_CMD" enum {
                      "GET_COMM_MODE_INFO" = 251,
                      "GET_ID" = 250,
                      "SET_REQUEST" = 249,
                      "GET_SEED" = 248,
                      "UNLOCK" = 247,
                      "SET_MTA" = 246,
                      "UPLOAD" = 245,
                      "SHORT_UPLOAD" = 244,
                      "BUILD_CHECKSUM" = 243,
                      "TRANSPORT_LAYER_CMD" = 242,
                      "USER_CMD" = 241,
                      "DOWNLOAD" = 240,
                      "DOWNLOAD_NEXT" = 239,
                      "DOWNLOAD_MAX" = 238,
                      "SHORT_DOWNLOAD" = 237,
                      "MODIFY_BITS" = 236,
                      "SET_CAL_PAGE" = 235,
                      "GET_CAL_PAGE" = 234,
                      "GET_PAG_PROCESSOR_INFO" = 233,
                      "GET_SEGMENT_INFO" = 232,
                      "GET_PAGE_INFO" = 231,
                      "SET_SEGMENT_MODE" = 230,
                      "GET_SEGMENT_MODE" = 229,
                      "COPY_CAL_PAGE" = 228,
                      "CLEAR_DAQ_LIST" = 227,
                      "SET_DAQ_PTR" = 226,
                      "WRITE_DAQ" = 225,
                      "SET_DAQ_LIST_MODE" = 224,
                      "GET_DAQ_LIST_MODE" = 223,
                      "START_STOP_DAQ_LIST" = 222,
                      "START_STOP_SYNCH" = 221,
                      "GET_DAQ_CLOCK" = 220,
                      "READ_DAQ" = 219,
                      "GET_DAQ_PROCESSOR_INFO" = 218,
                      "GET_DAQ_RESOLUTION_INFO" = 217,
                      "GET_DAQ_LIST_INFO" = 216,
                      "GET_DAQ_EVENT_INFO" = 215,
                      "FREE_DAQ" = 214,
                      "ALLOC_DAQ" = 213,
                      "ALLOC_ODT" = 212,
                      "ALLOC_ODT_ENTRY" = 211,
                      "PROGRAM_START" = 210,
                      "PROGRAM_CLEAR" = 209,
                      "PROGRAM" = 208,
                      "PROGRAM_RESET" = 207,
                      "GET_PGM_PROCESSOR_INFO" = 206,
                      "GET_SECTOR_INFO" = 205,
                      "PROGRAM_PREPARE" = 204,
                      "PROGRAM_FORMAT" = 203,
                      "PROGRAM_NEXT" = 202,
                      "PROGRAM_MAX" = 201,
                      "PROGRAM_VERIFY" = 200
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                    "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];
                  };
                };
                block "SEGMENT" struct {
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  uchar;
                  taggedstruct {
                    block "CHECKSUM" struct {
                      enum {
                        "XCP_ADD_11" = 1,
                        "XCP_ADD_12" = 2,
                        "XCP_ADD_14" = 3,
                        "XCP_ADD_22" = 4,
                        "XCP_ADD_24" = 5,
                        "XCP_ADD_44" = 6,
                        "XCP_CRC_16" = 7,
                        "XCP_CRC_16_CITT" = 8,
                        "XCP_CRC_32" = 9,
                        "XCP_USER_DEFINED" = 255
                      };
                      taggedstruct {
                        "MAX_BLOCK_SIZE" ulong;
                        "EXTERNAL_FUNCTION" char[256];
                      };
                    };
                    (block "PAGE" struct {
                      uchar;
                      enum {
                        "ECU_ACCESS_NOT_ALLOWED" = 0,
                        "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                        "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                        "ECU_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_READ_ACCESS_DONT_CARE" = 3
                      };
                      enum {
                        "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                        "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                        "XCP_WRITE_ACCESS_DONT_CARE" = 3
                      };
                      taggedstruct {
                        "INIT_SEGMENT" uchar;
                      };
                    })*;
                    (block "ADDRESS_MAPPING" struct {
                      ulong;
                      ulong;
                      ulong;
                    })*;
                    "PGM_VERIFY" ulong;
                  };
                };
                block "DAQ" struct {
                  enum {
                    "STATIC" = 0,
                    "DYNAMIC" = 1
                  };
                  uint;
                  uint;
                  uchar;
                  enum {
                    "OPTIMISATION_TYPE_DEFAULT" = 0,
                    "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
                    "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
                    "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
                    "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
                    "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
                  };
                  enum {
                    "ADDRESS_EXTENSION_FREE" = 0,
                    "ADDRESS_EXTENSION_ODT" = 1,
                    "ADDRESS_EXTENSION_DAQ" = 3
                  };
                  enum {
                    "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
                    "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
                  };
                  enum {
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
                    "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
                  };
                  uchar;
                  enum {
                    "NO_OVERLOAD_INDICATION" = 0,
                    "OVERLOAD_INDICATION_PID" = 1,
                    "OVERLOAD_INDICATION_EVENT" = 2
                  };
                  taggedstruct {
                    "PRESCALER_SUPPORTED" ;
                    "RESUME_SUPPORTED" ;
                    block "STIM" struct {
                      enum {
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                        "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
                      };
                      uchar;
                      taggedstruct {
                        "BIT_STIM_SUPPORTED" ;
                      };
                    };
                    block "TIMESTAMP_SUPPORTED" struct {
                      uint;
                      enum {
                        "NO_TIME_STAMP" = 0,
                        "SIZE_BYTE" = 1,
                        "SIZE_WORD" = 2,
                        "SIZE_DWORD" = 4
                      };
                      enum {
                        "UNIT_1NS" = 0,
                        "UNIT_10NS" = 1,
                        "UNIT_100NS" = 2,
                        "UNIT_1US" = 3,
                        "UNIT_10US" = 4,
                        "UNIT_100US" = 5,
                        "UNIT_1MS" = 6,
                        "UNIT_10MS" = 7,
                        "UNIT_100MS" = 8,
                        "UNIT_1S" = 9
                      };
                      taggedstruct {
                        "TIMESTAMP_FIXED" ;
                      };
                    };
                    "PID_OFF_SUPPORTED" ;
                    (block "DAQ_LIST" struct {
                      uint;
                      taggedstruct {
                        "DAQ_LIST_TYPE" enum {
                          "DAQ" = 1,
                          "STIM" = 2,
                          "DAQ_STIM" = 3
                        };
                        "MAX_ODT" uchar;
                        "MAX_ODT_ENTRIES" uchar;
                        "FIRST_PID" uchar;
                        "EVENT_FIXED" uint;
                        block "PREDEFINED" taggedstruct {
                          (block "ODT" struct {
                            uchar;
                            taggedstruct {
                              ("ODT_ENTRY" struct {
                                uchar;
                                ulong;
                                uchar;
                                uchar;
                                uchar;
                              })*;
                            };
                          })*;
                        };
                      };
                    })*;
                    (block "EVENT" struct {
                      char[101];
                      char[9];
                      uint;
                      enum {
                        "DAQ" = 1,
                        "STIM" = 2,
                        "DAQ_STIM" = 3
                      };
                      uchar;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                  };
                };
                block "PAG" struct {
                  uchar;
                  taggedstruct {
                    "FREEZE_SUPPORTED" ;
                  };
                };
                block "PGM" struct {
                  enum {
                    "PGM_MODE_ABSOLUTE" = 1,
                    "PGM_MODE_FUNCTIONAL" = 2,
                    "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
                  };
                  uchar;
                  uchar;
                  taggedstruct {
                    (block "SECTOR" struct {
                      char[101];
                      uchar;
                      ulong;
                      ulong;
                      uchar;
                      uchar;
                      uchar;
                    })*;
                    "COMMUNICATION_MODE_SUPPORTED" taggedunion {
                      "BLOCK" taggedstruct {
                        "SLAVE" ;
                        "MASTER" struct {
                          uchar;
                          uchar;
                        };
                      };
                      "INTERLEAVED" uchar;
                    };
                  };
                };
                block "DAQ_EVENT" taggedunion {
                  "FIXED_EVENT_LIST" taggedstruct {
                    ("EVENT" uint)*;
                  };
                  "VARIABLE" taggedstruct {
                    block "AVAILABLE_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                    block "DEFAULT_EVENT_LIST" taggedstruct {
                      ("EVENT" uint)*;
                    };
                  };
                };
              };
            };
          };
        };
        "CANAPE_GROUP" taggedstruct {
          block "STRUCTURE_LIST" (char[1024])*;
        };
      };
    /end A2ML

    /begin MOD_PAR ""
    /end MOD_PAR
    /begin MOD_COMMON ""
      BYTE_ORDER MSB_LAST
    /end MOD_COMMON


    /begin IF_DATA XCP 
        /begin PROTOCOL_LAYER 
          0x100 0x7D0 0x2710 0x0 0x0 0x0 0x0 0x0 0x8 0x8 BYTE_ORDER_MSB_LAST ADDRESS_GRANULARITY_BYTE 
            OPTIONAL_CMD GET_COMM_MODE_INFO 
            OPTIONAL_CMD GET_ID 
            OPTIONAL_CMD UNLOCK 
            OPTIONAL_CMD SET_MTA 
            OPTIONAL_CMD UPLOAD 
            OPTIONAL_CMD SHORT_UPLOAD 
            OPTIONAL_CMD TRANSPORT_LAYER_CMD 
            OPTIONAL_CMD DOWNLOAD 
            OPTIONAL_CMD DOWNLOAD_MAX 
            OPTIONAL_CMD GET_PAG_PROCESSOR_INFO 
            OPTIONAL_CMD SET_DAQ_PTR 
            OPTIONAL_CMD WRITE_DAQ 
            OPTIONAL_CMD SET_DAQ_LIST_MODE 
            OPTIONAL_CMD GET_DAQ_LIST_MODE 
            OPTIONAL_CMD START_STOP_DAQ_LIST 
            OPTIONAL_CMD START_STOP_SYNCH 
            OPTIONAL_CMD GET_DAQ_RESOLUTION_INFO 
            OPTIONAL_CMD FREE_DAQ 
            OPTIONAL_CMD ALLOC_DAQ 
            OPTIONAL_CMD ALLOC_ODT 
            OPTIONAL_CMD ALLOC_ODT_ENTRY 
        /end PROTOCOL_LAYER
        /begin DAQ 
          DYNAMIC 0x0 0x1 0x0 OPTIMISATION_TYPE_DEFAULT ADDRESS_EXTENSION_FREE IDENTIFICATION_FIELD_TYPE_ABSOLUTE GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE 0x7 OVERLOAD_INDICATION_PID 
            /begin EVENT 
              "EV_CANDRV" "EV_CANDRV" 0x1 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_CANIF" "EV_CANIF" 0x2 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_CANSM" "EV_CANSM" 0x3 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_CANNM" "EV_CANNM" 0x5 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_NM" "EV_NM" 0x10 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_COMM" "EV_COMM" 0x6 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_ECUM" "EV_ECUM" 0x7 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_CANTP" "EV_CANTP" 0x4 DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_COM" "EV_COM" 0xF DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
            /begin EVENT 
              "EV_VMM" "EV_VMM" 0xE DAQ 0x0 0x0 0x6 0x0 
            /end EVENT
        /end DAQ
        /begin XCP_ON_CAN 
          0x100 
              CAN_ID_MASTER 0x703 
              CAN_ID_SLAVE 0x704 
              BAUDRATE 0x7A120 
              SAMPLE_POINT 0x57 
              SAMPLE_RATE SINGLE 
              BTL_CYCLES 0x8 
              SJW 0x1 
              SYNC_EDGE SINGLE 
              MAX_DLC_REQUIRED 
        /end XCP_ON_CAN
    /end IF_DATA


    /begin MEASUREMENT kGENyVersion "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      DISPLAY_IDENTIFIER kGENyVersion
      ECU_ADDRESS 0xBD6C0
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 10 1 1
      SYMBOL_LINK "kGENyVersion" 0
    /end MEASUREMENT

    /begin MEASUREMENT lastInitObject[kCanNumberOfMaxUsedControllers] "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x1 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER lastInitObject[kCanNumberOfMaxUsedControllers]
      ECU_ADDRESS 0x104EE0
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "lastInitObject" 0
    /end MEASUREMENT

    /begin MEASUREMENT canInterruptCounter[kCanNumberOfMaxUsedControllers] "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x1 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER canInterruptCounter[kCanNumberOfMaxUsedControllers]
      ECU_ADDRESS 0x104EDF
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "canInterruptCounter" 0
    /end MEASUREMENT

    /begin MEASUREMENT canStatus[kCanNumberOfMaxUsedControllers] "MICROSAR BSW"
      UBYTE CanStatusType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x1 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER canStatus[kCanNumberOfMaxUsedControllers]
      ECU_ADDRESS 0x104F58
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "canStatus" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanActiveSendPdu[kCanNumberOfUsedTxCANObjects] "MICROSAR BSW"
      UWORD PduIdType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x1 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanActiveSendPdu[kCanNumberOfUsedTxCANObjects]
      ECU_ADDRESS 0x104F5A
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanActiveSendPdu" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanActiveSendState[kCanNumberOfUsedTxCANObjects] "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x1 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanActiveSendState[kCanNumberOfUsedTxCANObjects]
      ECU_ADDRESS 0x104EDE
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanActiveSendState" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanIf_ControllerMode[CANIF_MAX_CONTROLLER_TABLESIZE] "MICROSAR BSW"
      UBYTE CanIf_ControllerModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x2 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanIf_ControllerMode[CANIF_MAX_CONTROLLER_TABLESIZE]
      ECU_ADDRESS 0xE2BF4
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanIf_ControllerMode" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanIf_ChannelMode[CANIF_MAX_CONTROLLER_TABLESIZE] "MICROSAR BSW"
      UBYTE CanIf_PduGetModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x2 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanIf_ChannelMode[CANIF_MAX_CONTROLLER_TABLESIZE]
      ECU_ADDRESS 0x104ED4
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanIf_ChannelMode" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanIf_TxQueueCounter[CANIF_MAX_CONTROLLER_TABLESIZE] "MICROSAR BSW"
      UWORD PduIdType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x2 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanIf_TxQueueCounter[CANIF_MAX_CONTROLLER_TABLESIZE]
      ECU_ADDRESS 0x104E64
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanIf_TxQueueCounter" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSm_IsInitialized "MICROSAR BSW"
      UBYTE CanSm_IsInitialized 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSm_IsInitialized
      ECU_ADDRESS 0xE2C4C
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSm_IsInitialized" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_EnableSetBusSleep[CanSMCountOfCanNetworks] "MICROSAR BSW"
      UBYTE CanSM_EnableSetBusSleep 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_EnableSetBusSleep[CanSMCountOfCanNetworks]
      ECU_ADDRESS 0x104E38
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanSM_EnableSetBusSleep" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSm_BorTimer "MICROSAR BSW"
      UWORD CanSM_BorTimerType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSm_BorTimer
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSm_BorTimer" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSm_BorCounter "MICROSAR BSW"
      UBYTE CanSM_BorCounterType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSm_BorCounter
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSm_BorCounter" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSm_NwSmErrorCounter "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSm_NwSmErrorCounter
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSm_NwSmErrorCounter" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSm_RequestedComMode "MICROSAR BSW"
      UBYTE ComM_ModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSm_RequestedComMode
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSm_RequestedComMode" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSM_CommState "MICROSAR BSW"
      UBYTE ComM_ModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSM_CommState
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSM_CommState" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSm_BorState "MICROSAR BSW"
      UBYTE CanSM_BusOffRecoveryStateType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSm_BorState
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSm_BorState" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanSM_ClusterState[0].CanSm_BusOffEventOccurred "MICROSAR BSW"
      UBYTE CanSm_BusOffEventType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x3 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanSM_ClusterState[0].CanSm_BusOffEventOccurred
      ECU_ADDRESS 0x0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "CanSM_ClusterState[0].CanSm_BusOffEventOccurred" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_CommState "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_CommState
      ECU_ADDRESS 0x104E3A
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_CommState" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_MsgTimer "MICROSAR BSW"
      UWORD CanNm_TimerCounterType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_MsgTimer
      ECU_ADDRESS 0x104E60
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_MsgTimer" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_MsgTimeoutTimer "MICROSAR BSW"
      UWORD CanNm_TimerCounterType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_MsgTimeoutTimer
      ECU_ADDRESS 0x104E5C
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_MsgTimeoutTimer" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_NetworkRestartFlag "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_NetworkRestartFlag
      ECU_ADDRESS 0x104E62
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_NetworkRestartFlag" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_TxControlStateRequest "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_TxControlStateRequest
      ECU_ADDRESS 0x104E4E
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_TxControlStateRequest" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_TimeoutTimer "MICROSAR BSW"
      UWORD CanNm_TimerCounterType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_TimeoutTimer
      ECU_ADDRESS 0x104E5E
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_TimeoutTimer" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_WaitBusSleepTimer "MICROSAR BSW"
      UWORD CanNm_TimerCounterType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_WaitBusSleepTimer
      ECU_ADDRESS 0x104E4A
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_WaitBusSleepTimer" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_RepeatMsgTimer "MICROSAR BSW"
      UWORD CanNm_TimerCounterType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_RepeatMsgTimer
      ECU_ADDRESS 0x104E4C
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_RepeatMsgTimer" 0
    /end MEASUREMENT

    /begin MEASUREMENT CanNm_NmState "MICROSAR BSW"
      UBYTE Nm_StateType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x5 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER CanNm_NmState
      ECU_ADDRESS 0x104E58
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "CanNm_NmState" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_Inhibition.ComM_ECUGroupClassification "MICROSAR BSW"
      UBYTE ComM_InhibitionStatusType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_Inhibition.ComM_ECUGroupClassification
      ECU_ADDRESS 0x104CE0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "ComM_Inhibition.ComM_ECUGroupClassification" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_Inhibition.ComM_InhibitCnt "MICROSAR BSW"
      UWORD uint16 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_Inhibition.ComM_InhibitCnt
      ECU_ADDRESS 0x104CE2
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "ComM_Inhibition.ComM_InhibitCnt" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_UserReqFullComArray "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_UserReqFullComArray
      ECU_ADDRESS 0x104CD2
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_UserReqFullComArray" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_Inhibition.ComM_InhibitionStatus "MICROSAR BSW"
      UBYTE ComM_InhibitionStatusType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_Inhibition.ComM_InhibitionStatus[COMM_ACTIVE_CHANNEL]
      ECU_ADDRESS 0x104CE4
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_Inhibition.ComM_InhibitionStatus" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_FrShutdown[COMM_ACTIVE_CHANNEL] "MICROSAR BSW"
      UBYTE ComM_FrShutdownType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_FrShutdown[COMM_ACTIVE_CHANNEL]
      ECU_ADDRESS 0x104CD4
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_FrShutdown" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_BusSmState[COMM_ACTIVE_CHANNEL] "MICROSAR BSW"
      UBYTE ComM_ModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_BusSmState[COMM_ACTIVE_CHANNEL]
      ECU_ADDRESS 0x104CD5
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_BusSmState" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_MinFullComModeTime[COMM_ACTIVE_CHANNEL] "MICROSAR BSW"
      UWORD uint16 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_MinFullComModeTime[COMM_ACTIVE_CHANNEL]
      ECU_ADDRESS 0x104CEA
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_MinFullComModeTime" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_NmLightTimeout[COMM_ACTIVE_CHANNEL] "MICROSAR BSW"
      UWORD uint16 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_NmLightTimeout[COMM_ACTIVE_CHANNEL]
      ECU_ADDRESS 0x104CE8
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_NmLightTimeout" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_ActiveComMode "MICROSAR BSW"
      UBYTE ComM_SubModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_ActiveComMode
      ECU_ADDRESS 0x104CF0
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_ActiveComMode" 0
    /end MEASUREMENT

    /begin MEASUREMENT ComM_BusComModeReq "MICROSAR BSW"
      UBYTE ComM_SubModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x6 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER ComM_BusComModeReq
      ECU_ADDRESS 0x104CD8
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "ComM_BusComModeReq" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_ModuleState_t "MICROSAR BSW"
      UBYTE EcuM_StateType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_ModuleState_t
      ECU_ADDRESS 0xE32B9
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_ModuleState_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_AppMode_t "MICROSAR BSW"
      UBYTE AppModeType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_AppMode_t
      ECU_ADDRESS 0xE32D8
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_AppMode_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_ShutdownTarget_t "MICROSAR BSW"
      UBYTE EcuM_StateType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_ShutdownTarget_t
      ECU_ADDRESS 0xE32C4
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_ShutdownTarget_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_WakeupReaction_t "MICROSAR BSW"
      UBYTE EcuM_WakeupReactionType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_WakeupReaction_t
      ECU_ADDRESS 0xE32D7
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_WakeupReaction_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_PendingWakeups_t "MICROSAR BSW"
      ULONG EcuM_WakeupSourceType 0 0 0 4294967295
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_PendingWakeups_t
      ECU_ADDRESS 0xE32BC
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_PendingWakeups_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_RunRequestCounter_t "MICROSAR BSW"
      UBYTE EcuM_UserType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_RunRequestCounter_t
      ECU_ADDRESS 0xE32B4
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_RunRequestCounter_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_PostRunRequestCounter_t "MICROSAR BSW"
      UBYTE EcuM_UserType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_PostRunRequestCounter_t
      ECU_ADDRESS 0xE32B7
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_PostRunRequestCounter_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_LastShutdownTarget_t.DefaultState_t "MICROSAR BSW"
      UBYTE EcuM_StateType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_LastShutdownTarget_t.DefaultState_t
      ECU_ADDRESS 0xE32DC
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_LastShutdownTarget_t.DefaultState_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_LastShutdownTarget_t.DefaultSleepMode_u8 "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_LastShutdownTarget_t.DefaultSleepMode_u8
      ECU_ADDRESS 0xE32DD
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_LastShutdownTarget_t.DefaultSleepMode_u8" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_FsmState_t "MICROSAR BSW"
      SLONG EcuM_InternalStateType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_FsmState_t
      ECU_ADDRESS 0xE32E0
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_FsmState_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT EcuM_NvM_JobStatus_t "MICROSAR BSW"
      UBYTE NvM_RequestResultType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0x7 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER EcuM_NvM_JobStatus_t
      ECU_ADDRESS 0xE32B6
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "EcuM_NvM_JobStatus_t" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_LMgt_Status "MICROSAR BSW"
      SLONG Com_StatusType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_LMgt_Status
      ECU_ADDRESS 0xE3284
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "com_LMgt_Status" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_LMgt_RxPduGroupState[COM_MAXRXIPDUCNT] "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_LMgt_RxPduGroupState[COM_MAXRXIPDUCNT]
      ECU_ADDRESS 0x104D16
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "com_LMgt_RxPduGroupState" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_LMgt_TxPduGroupState[COM_MAXTXIPDUCNT] "MICROSAR BSW"
      UBYTE uint8 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_LMgt_TxPduGroupState[COM_MAXTXIPDUCNT]
      ECU_ADDRESS 0x104D10
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 4 1 1
      SYMBOL_LINK "com_LMgt_TxPduGroupState" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_RxDlMon_TimeoutCnt[COM_MAXRXIPDUCNT] "MICROSAR BSW"
      UWORD uint16 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_RxDlMon_TimeoutCnt[COM_MAXRXIPDUCNT]
      ECU_ADDRESS 0x104D14
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "com_RxDlMon_TimeoutCnt" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_TxModeHdlr_TransmitRequest[COM_MAXTXIPDUCNT] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_TxModeHdlr_TransmitRequest[COM_MAXTXIPDUCNT]
      ECU_ADDRESS 0x104D00
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 4 1 1
      SYMBOL_LINK "com_TxModeHdlr_TransmitRequest" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_TxModeHdlr_CurrentTxMode[COM_MAXTXIPDUCNT] "MICROSAR BSW"
      UWORD Com_TxModeHdlr_TxModeHdlType 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_TxModeHdlr_CurrentTxMode[COM_MAXTXIPDUCNT]
      ECU_ADDRESS 0x104CF8
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 4 1 1
      SYMBOL_LINK "com_TxModeHdlr_CurrentTxMode" 0
    /end MEASUREMENT

    /begin MEASUREMENT com_TxDlMon_TimeoutCnt[COM_MAXTXIPDUCNT] "MICROSAR BSW"
      UWORD uint16 0 0 0 65535
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xF 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER com_TxDlMon_TimeoutCnt[COM_MAXTXIPDUCNT]
      ECU_ADDRESS 0x104D40
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 4 1 1
      SYMBOL_LINK "com_TxDlMon_TimeoutCnt" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_InitState "MICROSAR BSW"
      UBYTE Vmm_InitStateType 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_InitState
      ECU_ADDRESS 0xE32E5
      ECU_ADDRESS_EXTENSION 0x0
      SYMBOL_LINK "Vmm_InitState" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_BusSMInitFlag[VMM_ChannelCount] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_BusSMInitFlag[VMM_ChannelCount]
      ECU_ADDRESS 0x1047D2
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "Vmm_BusSMInitFlag" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_ComCtrlComRx[VMM_ChannelCount] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_ComCtrlComRx[VMM_ChannelCount]
      ECU_ADDRESS 0x1047D5
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "Vmm_ComCtrlComRx" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_ComCtrlComTx[VMM_ChannelCount] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_ComCtrlComTx[VMM_ChannelCount]
      ECU_ADDRESS 0x1047D6
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "Vmm_ComCtrlComTx" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_ComTxState[VMM_ChannelCount] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_ComTxState[VMM_ChannelCount]
      ECU_ADDRESS 0x1047D3
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "Vmm_ComTxState" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_ComRxState[VMM_ChannelCount] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_ComRxState[VMM_ChannelCount]
      ECU_ADDRESS 0x1047D4
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "Vmm_ComRxState" 0
    /end MEASUREMENT

    /begin MEASUREMENT Vmm_BusSMDMState[VMM_ChannelCount] "MICROSAR BSW"
      UBYTE boolean 0 0 0 255
      FORMAT "%.15 "
      /begin IF_DATA XCP 
          /begin DAQ_EVENT 
            
            FIXED_EVENT_LIST 
              EVENT 0xE 
          /end DAQ_EVENT
      /end IF_DATA
      DISPLAY_IDENTIFIER Vmm_BusSMDMState[VMM_ChannelCount]
      ECU_ADDRESS 0x1047D7
      ECU_ADDRESS_EXTENSION 0x0
      MATRIX_DIM 1 1 1
      SYMBOL_LINK "Vmm_BusSMDMState" 0
    /end MEASUREMENT

    /begin COMPU_METHOD boolean ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF boolean
    /end COMPU_METHOD

    /begin COMPU_METHOD uint8 ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD uint16 ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD uint32 ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD sint8 ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD sint16 ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD sint32 ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD PduIdType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD CanStatusType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanStatusType
    /end COMPU_METHOD

    /begin COMPU_METHOD CanIf_ControllerModeType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanIf_ControllerModeType
    /end COMPU_METHOD

    /begin COMPU_METHOD CanIf_PduGetModeType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanIf_PduGetModeType
    /end COMPU_METHOD

    /begin COMPU_METHOD CanSm_IsInitialized ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanSm_IsInitialized
    /end COMPU_METHOD

    /begin COMPU_METHOD CanSM_EnableSetBusSleep ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanSM_EnableSetBusSleep
    /end COMPU_METHOD

    /begin COMPU_METHOD CanSM_BusOffRecoveryStateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanSM_BusOffRecoveryStateType
    /end COMPU_METHOD

    /begin COMPU_METHOD CanSm_BusOffEventType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF CanSm_BusOffEventType
    /end COMPU_METHOD

    /begin COMPU_METHOD CanSM_BorTimerType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD CanSM_BorCounterType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD Nm_StateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF Nm_StateType
    /end COMPU_METHOD

    /begin COMPU_METHOD CanNm_TimerCounterType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD Nm_NetCoordStateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF Nm_NetCoordStateType
    /end COMPU_METHOD

    /begin COMPU_METHOD Nm_TimerCounterType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD Nm_NetworkCoordType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD ComM_DcmReqStateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF ComM_DcmReqStateType
    /end COMPU_METHOD

    /begin COMPU_METHOD ComM_SubModeType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF ComM_SubModeType
    /end COMPU_METHOD

    /begin COMPU_METHOD ComM_ModeType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF ComM_ModeType
    /end COMPU_METHOD

    /begin COMPU_METHOD ComM_FrShutdownType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF ComM_FrShutdownType
    /end COMPU_METHOD

    /begin COMPU_METHOD ComM_InhibitionStatusType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD AppModeType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD EcuM_UserType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD EcuM_StateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF EcuM_StateType
    /end COMPU_METHOD

    /begin COMPU_METHOD EcuM_WakeupReactionType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF EcuM_WakeupReactionType
    /end COMPU_METHOD

    /begin COMPU_METHOD NvM_RequestResultType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF NvM_RequestResultType
    /end COMPU_METHOD

    /begin COMPU_METHOD EcuM_InternalStateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF EcuM_InternalStateType
    /end COMPU_METHOD

    /begin COMPU_METHOD EcuM_WakeupSourceType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF EcuM_WakeupSourceType
    /end COMPU_METHOD

    /begin COMPU_METHOD Com_TxModeHdlr_TxModeHdlType ""
      IDENTICAL "%4.0" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD Com_StatusType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF Com_StatusType
    /end COMPU_METHOD

    /begin COMPU_METHOD Vmm_InitStateType ""
      TAB_VERB "%.1" ""
      COMPU_TAB_REF Vmm_InitStateType
    /end COMPU_METHOD

    /begin COMPU_VTAB boolean "MICROSAR BSW" TAB_VERB 3
      0 "FALSE"
      1 "TRUE"
      2 "UNDEFINED"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanStatusType "MICROSAR BSW" TAB_VERB 2
      1 "kCanHwIsInit"
      254 "kCanHwIsUninit"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanIf_ControllerModeType "MICROSAR BSW" TAB_VERB 4
      0 "CANIF_CS_UNINIT"
      1 "CANIF_CS_STOPPED"
      2 "CANIF_CS_STARTED"
      3 "CANIF_CS_SLEEP"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanIf_PduGetModeType "MICROSAR BSW" TAB_VERB 6
      0 "CANIF_GET_OFFLINE"
      1 "CANIF_GET_RX_ONLINE"
      2 "CANIF_GET_TX_ONLINE"
      3 "CANIF_GET_ONLINE"
      4 "CANIF_GET_OFFLINE_ACTIVE"
      5 "CANIF_GET_OFFLINE_ACTIVE_RX_ONLINE"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanSm_IsInitialized "MICROSAR BSW" TAB_VERB 3
      0 "CANSM_INITFUNCTION_NOT_CALLED"
      1 "CANSM_INITFUNCTION_CALLED"
      2 "CANSM_PROCEED_INITIALIZATION"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanSM_EnableSetBusSleep "MICROSAR BSW" TAB_VERB 2
      0 "CANSM_SET_BUS_SLEEP_MODE"
      1 "CANSM_PREVENT_BUS_SLEEP_MODE"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanSM_BusOffRecoveryStateType "MICROSAR BSW" TAB_VERB 7
      0 "CANSM_BOR_IDLE"
      1 "CANSM_BOR_CHECK_INIT"
      2 "CANSM_BOR_NO_BUS_OFF"
      3 "CANSM_BOR_STATE_TXOFF"
      4 "CANSM_BOR_STATE_CHECK"
      5 "CANSM_BOR_TXOFF_L2"
      6 "CANSM_BOR_CHECK_L2"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB CanSm_BusOffEventType "MICROSAR BSW" TAB_VERB 2
      0 "FALSE"
      1 "TRUE"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB Nm_StateType "MICROSAR BSW" TAB_VERB 7
      0 "NM_STATE_UNINIT"
      1 "NM_STATE_BUS_SLEEP"
      2 "NM_STATE_PREPARE_BUS_SLEEP"
      3 "NM_STATE_READY_SLEEP"
      4 "NM_STATE_NORMAL_OPERATION"
      5 "NM_STATE_REPEAT_MESSAGE"
      6 "NM_STATE_SYNCHRONIZE"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB Nm_NetCoordStateType "MICROSAR BSW" TAB_VERB 6
      0 "NM_UNINITIALIZED"
      1 "NM_AWAKE"
      2 "NM_SLEEP_WAITANNOUNCESLEEP"
      3 "NM_SLEEP_WAITTOKEN"
      4 "NM_SLEEP_WAITTOKENLOSS"
      5 "NM_SLEEP_WAITSLEEP"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB ComM_DcmReqStateType "MICROSAR BSW" TAB_VERB 2
      0 "COMM_DCM_REQ_INACTIVE"
      1 "COMM_DCM_REQ_ACTIVE"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB ComM_SubModeType "MICROSAR BSW" TAB_VERB 4
      0 "COMM_NO_COM"
      1 "COMM_SI_COM"
      2 "COMM_READY_TO_SLEEP"
      3 "COMM_NETWORK_REQUESTED"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB ComM_ModeType "MICROSAR BSW" TAB_VERB 3
      0 "COMM_NO_COMMUNICATION"
      1 "COMM_SILENT_COMMUNICATION"
      2 "COMM_FULL_COMMUNICATION"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB ComM_FrShutdownType "MICROSAR BSW" TAB_VERB 2
      0 "COMM_FR_SHUTDOWN_ACTIVE"
      1 "COMM_FR_SHUTDOWN_DEACTIVE"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB EcuM_StateType "MICROSAR BSW" TAB_VERB 22
      16 "ECUM_STATE_STARTUP"
      17 "ECUM_STATE_STARTUP_ONE"
      18 "ECUM_STATE_STARTUP_TWO"
      32 "ECUM_STATE_WAKEUP"
      33 "ECUM_STATE_WAKEUP_ONE"
      34 "ECUM_STATE_WAKEUP_VALIDATION"
      35 "ECUM_STATE_WAKEUP_REACTION"
      36 "ECUM_STATE_WAKEUP_TWO"
      37 "ECUM_STATE_WAKEUP_WAKESLEEP"
      38 "ECUM_STATE_WAKEUP_TTII"
      48 "ECUM_STATE_RUN"
      50 "ECUM_STATE_APP_RUN"
      51 "ECUM_STATE_APP_POST_RUN"
      64 "ECUM_STATE_SHUTDOWN"
      68 "ECUM_STATE_PREP_SHUTDOWN"
      73 "ECUM_STATE_GO_SLEEP"
      77 "ECUM_STATE_GO_OFF_ONE"
      78 "ECUM_STATE_GO_OFF_TWO"
      80 "ECUM_STATE_SLEEP"
      144 "ECUM_STATE_RESET"
      128 "ECUM_STATE_OFF"
      255 "ECUM_STATE_ERROR"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB EcuM_WakeupReactionType "MICROSAR BSW" TAB_VERB 3
      0 "ECUM_WKACT_RUN"
      2 "ECUM_WKACT_TTII"
      3 "ECUM_WKACT_SHUTDOWN"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB NvM_RequestResultType "MICROSAR BSW" TAB_VERB 5
      1 "NVM_REQ_NOT_OK"
      2 "NVM_REQ_PENDING"
      3 "NVM_REQ_INTEGRITY_FAILED"
      4 "NVM_REQ_BLOCK_SKIPPED"
      5 "NVM_REQ_NV_INVALIDATED"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB EcuM_InternalStateType "MICROSAR BSW" TAB_VERB 10
      0 "ECUM_INT_STATE_RUN"
      1 "ECUM_INT_STATE_POST_RUN"
      2 "ECUM_INT_STATE_PREP_SHUTDOWN"
      3 "ECUM_INT_STATE_GO_OFF_ONE"
      4 "ECUM_INT_STATE_GO_SLEEP"
      5 "ECUM_INT_STATE_FORCE_RESET"
      6 "ECUM_INT_STATE_SLEEP"
      7 "ECUM_INT_STATE_WAKEUP_VALIDATION"
      8 "ECUM_INT_STATE_ERROR"
      9 "ECUM_INT_STATE_WAKEUP_REACTION"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB EcuM_WakeupSourceType "MICROSAR BSW" TAB_VERB 6
      1 "ECUM_WKSOURCE_POWER"
      2 "ECUM_WKSOURCE_RESET"
      4 "ECUM_WKSOURCE_INTERNAL_RESET"
      8 "ECUM_WKSOURCE_INTERNAL_WDG"
      16 "ECUM_WKSOURCE_EXTERNAL_WDG"
      32 "ECUM_WKSOURCE_CAN"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB Com_StatusType "MICROSAR BSW" TAB_VERB 2
      0 "COM_UNINIT"
      1 "COM_INIT"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB Vmm_InitStateType "MICROSAR BSW" TAB_VERB 2
      0 "VMM_INIT_STATE_UNINIT"
      1 "VMM_INIT_STATE_INIT"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin GROUP BswGeneral "MICROSAR BSW"
      /begin REF_MEASUREMENT
        kGENyVersion 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP CANDRV "MICROSAR BSW"
      /begin REF_MEASUREMENT
        lastInitObject[kCanNumberOfMaxUsedControllers] canInterruptCounter[kCanNumberOfMaxUsedControllers] canStatus[kCanNumberOfMaxUsedControllers] CanActiveSendPdu[kCanNumberOfUsedTxCANObjects] CanActiveSendState[kCanNumberOfUsedTxCANObjects] 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP CANIF "MICROSAR BSW"
      /begin REF_MEASUREMENT
        CanIf_ControllerMode[CANIF_MAX_CONTROLLER_TABLESIZE] CanIf_ChannelMode[CANIF_MAX_CONTROLLER_TABLESIZE] CanIf_TxQueueCounter[CANIF_MAX_CONTROLLER_TABLESIZE] 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP CANSM "MICROSAR BSW"
      /begin REF_MEASUREMENT
        CanSm_IsInitialized CanSM_EnableSetBusSleep[CanSMCountOfCanNetworks] CanSM_ClusterState[0].CanSm_BorTimer CanSM_ClusterState[0].CanSm_BorCounter CanSM_ClusterState[0].CanSm_NwSmErrorCounter CanSM_ClusterState[0].CanSm_RequestedComMode CanSM_ClusterState[0].CanSM_CommState 
        CanSM_ClusterState[0].CanSm_BorState CanSM_ClusterState[0].CanSm_BusOffEventOccurred 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP CANNM "MICROSAR BSW"
      /begin REF_MEASUREMENT
        CanNm_CommState CanNm_MsgTimer CanNm_MsgTimeoutTimer CanNm_TxControlStateRequest CanNm_NetworkRestartFlag CanNm_TxControlStateRequest CanNm_TimeoutTimer 
        CanNm_WaitBusSleepTimer CanNm_RepeatMsgTimer CanNm_NmState 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP NM "MICROSAR BSW"
    /end GROUP

    /begin GROUP COMM "MICROSAR BSW"
      /begin REF_MEASUREMENT
        ComM_Inhibition.ComM_ECUGroupClassification ComM_Inhibition.ComM_InhibitCnt ComM_UserReqFullComArray ComM_Inhibition.ComM_InhibitionStatus ComM_FrShutdown[COMM_ACTIVE_CHANNEL] ComM_BusSmState[COMM_ACTIVE_CHANNEL] ComM_MinFullComModeTime[COMM_ACTIVE_CHANNEL]
        ComM_NmLightTimeout[COMM_ACTIVE_CHANNEL] ComM_ActiveComMode ComM_BusComModeReq 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP ECUM "MICROSAR BSW"
      /begin REF_MEASUREMENT
        EcuM_ModuleState_t EcuM_AppMode_t EcuM_ShutdownTarget_t EcuM_WakeupReaction_t EcuM_PendingWakeups_t EcuM_RunRequestCounter_t EcuM_PostRunRequestCounter_t 
        EcuM_LastShutdownTarget_t.DefaultState_t EcuM_LastShutdownTarget_t.DefaultSleepMode_u8 EcuM_FsmState_t EcuM_NvM_JobStatus_t 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP CanTp "MICROSAR BSW"
    /end GROUP

    /begin GROUP Com "MICROSAR BSW"
      /begin REF_MEASUREMENT
        com_LMgt_Status com_LMgt_RxPduGroupState[COM_MAXRXIPDUCNT] com_LMgt_TxPduGroupState[COM_MAXTXIPDUCNT] com_RxDlMon_TimeoutCnt[COM_MAXRXIPDUCNT] com_TxModeHdlr_TransmitRequest[COM_MAXTXIPDUCNT] com_TxModeHdlr_CurrentTxMode[COM_MAXTXIPDUCNT] com_TxDlMon_TimeoutCnt[COM_MAXTXIPDUCNT] 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP Vmm "MICROSAR BSW"
      /begin REF_MEASUREMENT
        Vmm_InitState Vmm_BusSMInitFlag[VMM_ChannelCount] Vmm_ComCtrlComRx[VMM_ChannelCount] Vmm_ComCtrlComTx[VMM_ChannelCount] Vmm_ComTxState[VMM_ChannelCount] Vmm_ComRxState[VMM_ChannelCount] Vmm_BusSMDMState[VMM_ChannelCount] 
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP MICROSAR_BSW "MICROSAR BSW"
      /begin SUB_GROUP
        BswGeneral CANDRV CANIF CANSM CANNM NM COMM 
        ECUM CanTp Com Vmm 
      /end SUB_GROUP
    /end GROUP  

  /end MODULE

/end PROJECT